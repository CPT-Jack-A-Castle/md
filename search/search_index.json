{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Unofficial Monero Documentation (2% done) \u00b6 Monerodocs attempts to organize basic technical knowledge on Monero in one place. The goal is to educate and onboard power users faster. While technical explanations are out there, the information is scattered through reddit posts, git comments, stack exchange answers, chat logs and the source code. This makes it hard to find complete and up-to-date explanations on advanced topics. If you spot errors or issues please kindly drop me an email at qertoip@protonmail.com or submit a github pull request.","title":"Home"},{"location":"#unofficial-monero-documentation-2-done","text":"Monerodocs attempts to organize basic technical knowledge on Monero in one place. The goal is to educate and onboard power users faster. While technical explanations are out there, the information is scattered through reddit posts, git comments, stack exchange answers, chat logs and the source code. This makes it hard to find complete and up-to-date explanations on advanced topics. If you spot errors or issues please kindly drop me an email at qertoip@protonmail.com or submit a github pull request.","title":"Unofficial Monero Documentation (2% done)"},{"location":"multisignature/","text":"Multisignature \u00b6 Warning This is unreleased feature. In cryptocurrencies, multisig feature allows to sign transaction with more than one private key. Funds protected with multisig can only be spent by signing with M-of-N keys. Example use cases: shared account (1-of-2; both husband and wife individually have full access to their funds) consensus account (2-of-2; both husband and wife must agree to spend their funds) threshold account (2-of-3; an escrow service is involved as an independent 3rd party, to co-sign with either the seller, or with the buyer, if seller and buyer do not agree) secure account (2-of-3; a single owner controlls all 3 keys but secures them via a different means to diversify risks) arbitrary threshold account (M-of-N; some cryptocurrencies provide full flexibility on the number of signers) Monero multisignature \u00b6 Monero doesn't directly implement multisignatures (at least not in a classical sense). Monero emulates the feature by secret splitting. Transactions are still signed with a single spend key. The spend key is a sum of all N private keys. The rationale for such design is to decouple multisig from ring signatures. Let's consider the 2-of-3 scheme. We have 3 participants. Each participant is granted exactly 2 private keys in a way that pairs do not repeat between participants. This way any 2 participants together have all 3 private keys required to create the private spend key. Multi-signing is a wallet-level feature. There is no way to learn from the blockchain which transactions were created using multiple signatures. It is also worth noting in Monero there is no multisig addresses as such. Address structure does not care how the underlying private spend key got created. In Monero, only N-of-N and (N-1)-of-N multisignature schemes are supported. This covers all common scenarios mentioned above but does not allow for arbitrary voting (like \"3-of-5 board members\"). After multisig wallet setup every participant ends up knowing the public address and private view key. This is necessary for participants to recognize and decipher transactions they are supposed to co-sign. Multisig wallet setup \u00b6 Let's consider a 2-of-3 scheme as it generalizes well. There will be three CLI wallet commands involved: 1. prepare_multisig \u00b6 Every participant independently generates initialization data . This is not an address. Every participant sends his initialization data manually to all other participants over secure channel. 2. make_multisig \u00b6 Every participant applies initialization data from other participants. This results in a second round of initialization data . This is still not an address. Every participants sends his second round of init data to all other participants over secure channel. 3. finalize_multisig \u00b6 Every participant finalizes wallet creation by applying the second round of init data from all other participants. This finally results in a wallet public address and private view key to be known for all participants. Please note actions are symmetric for all participants. Even though we considered a 2-of-3 scheme, every participant cooperates with everyone else. The secret splitting is performed internally by the wallet. Secure sharing of initialization data between participants is manual. The wallet itself does not provide any secure communication channel. This is out of scope. Receiving funds \u00b6 Address built by multisig setup is like any other address. You can generate integrated addresses and subaddresses based on it. All participants are able to see incoming funds as they share the private view key. With a CLI, use the following commands to see incoming payments: address refresh show_transfers Spending funds \u00b6 TODO Reference \u00b6 https://monero.stackexchange.com/questions/5646/how-to-use-monero-multisignature-wallets-2-2-2-3","title":"Multisignature"},{"location":"multisignature/#multisignature","text":"Warning This is unreleased feature. In cryptocurrencies, multisig feature allows to sign transaction with more than one private key. Funds protected with multisig can only be spent by signing with M-of-N keys. Example use cases: shared account (1-of-2; both husband and wife individually have full access to their funds) consensus account (2-of-2; both husband and wife must agree to spend their funds) threshold account (2-of-3; an escrow service is involved as an independent 3rd party, to co-sign with either the seller, or with the buyer, if seller and buyer do not agree) secure account (2-of-3; a single owner controlls all 3 keys but secures them via a different means to diversify risks) arbitrary threshold account (M-of-N; some cryptocurrencies provide full flexibility on the number of signers)","title":"Multisignature"},{"location":"multisignature/#monero-multisignature","text":"Monero doesn't directly implement multisignatures (at least not in a classical sense). Monero emulates the feature by secret splitting. Transactions are still signed with a single spend key. The spend key is a sum of all N private keys. The rationale for such design is to decouple multisig from ring signatures. Let's consider the 2-of-3 scheme. We have 3 participants. Each participant is granted exactly 2 private keys in a way that pairs do not repeat between participants. This way any 2 participants together have all 3 private keys required to create the private spend key. Multi-signing is a wallet-level feature. There is no way to learn from the blockchain which transactions were created using multiple signatures. It is also worth noting in Monero there is no multisig addresses as such. Address structure does not care how the underlying private spend key got created. In Monero, only N-of-N and (N-1)-of-N multisignature schemes are supported. This covers all common scenarios mentioned above but does not allow for arbitrary voting (like \"3-of-5 board members\"). After multisig wallet setup every participant ends up knowing the public address and private view key. This is necessary for participants to recognize and decipher transactions they are supposed to co-sign.","title":"Monero multisignature"},{"location":"multisignature/#multisig-wallet-setup","text":"Let's consider a 2-of-3 scheme as it generalizes well. There will be three CLI wallet commands involved:","title":"Multisig wallet setup"},{"location":"multisignature/#1-prepare_multisig","text":"Every participant independently generates initialization data . This is not an address. Every participant sends his initialization data manually to all other participants over secure channel.","title":"1. prepare_multisig"},{"location":"multisignature/#2-make_multisig","text":"Every participant applies initialization data from other participants. This results in a second round of initialization data . This is still not an address. Every participants sends his second round of init data to all other participants over secure channel.","title":"2. make_multisig"},{"location":"multisignature/#3-finalize_multisig","text":"Every participant finalizes wallet creation by applying the second round of init data from all other participants. This finally results in a wallet public address and private view key to be known for all participants. Please note actions are symmetric for all participants. Even though we considered a 2-of-3 scheme, every participant cooperates with everyone else. The secret splitting is performed internally by the wallet. Secure sharing of initialization data between participants is manual. The wallet itself does not provide any secure communication channel. This is out of scope.","title":"3. finalize_multisig"},{"location":"multisignature/#receiving-funds","text":"Address built by multisig setup is like any other address. You can generate integrated addresses and subaddresses based on it. All participants are able to see incoming funds as they share the private view key. With a CLI, use the following commands to see incoming payments: address refresh show_transfers","title":"Receiving funds"},{"location":"multisignature/#spending-funds","text":"TODO","title":"Spending funds"},{"location":"multisignature/#reference","text":"https://monero.stackexchange.com/questions/5646/how-to-use-monero-multisignature-wallets-2-2-2-3","title":"Reference"},{"location":"networks/","text":"Networks \u00b6 Monero offers three separate networks and blockchains: mainnet , stagenet and testnet . Every blockchain has its own genesis block and is entirely seperate from others. Also, corresponding p2p networks are separate. Mainnet \u00b6 Mainnet is the \"production\" network and blockchain. Mainnet is the only blockchain where XMR units have value. Mainnet is what people mean by default. Stagenet \u00b6 Stagenet is what you need to learn Monero safely. Stagenet is technically equivalent to mainnet, both in terms of features and consensus rules. Similar to mainnet, use the latest official Monero release to be compatible with stagenet. Stagenet was introduced in March 2018 as part of Monero 0.12.0.0. Testnet \u00b6 As a normal user, use stagenet instead. Testnet is for developers. Testnet is the \"experimental\" network and blockchain where things get released long before mainnet. Testnet forks early and often. Most of the time you need to compile Monero from source to be compatible with testnet. Otherwise you will get stuck on the old not-forked version. Why stagenet and testnet coins have no value? \u00b6 If mainnet and stagenet are technically equivalent then why only mainnet coins have value? This is simply the convention community embraced. Value only comes from a shared believe that mainnet coins will be accepted by other people in the future.","title":"Mainnet, Stagenet, Testnet"},{"location":"networks/#networks","text":"Monero offers three separate networks and blockchains: mainnet , stagenet and testnet . Every blockchain has its own genesis block and is entirely seperate from others. Also, corresponding p2p networks are separate.","title":"Networks"},{"location":"networks/#mainnet","text":"Mainnet is the \"production\" network and blockchain. Mainnet is the only blockchain where XMR units have value. Mainnet is what people mean by default.","title":"Mainnet"},{"location":"networks/#stagenet","text":"Stagenet is what you need to learn Monero safely. Stagenet is technically equivalent to mainnet, both in terms of features and consensus rules. Similar to mainnet, use the latest official Monero release to be compatible with stagenet. Stagenet was introduced in March 2018 as part of Monero 0.12.0.0.","title":"Stagenet"},{"location":"networks/#testnet","text":"As a normal user, use stagenet instead. Testnet is for developers. Testnet is the \"experimental\" network and blockchain where things get released long before mainnet. Testnet forks early and often. Most of the time you need to compile Monero from source to be compatible with testnet. Otherwise you will get stuck on the old not-forked version.","title":"Testnet"},{"location":"networks/#why-stagenet-and-testnet-coins-have-no-value","text":"If mainnet and stagenet are technically equivalent then why only mainnet coins have value? This is simply the convention community embraced. Value only comes from a shared believe that mainnet coins will be accepted by other people in the future.","title":"Why stagenet and testnet coins have no value?"},{"location":"technical-specs/","text":"Monero Technical Specs \u00b6 Live \u00b6 Monero blockchain is live since 18 April 2014 No premine, no instamine, no ICO, no token \u00b6 Monero had no premine or instamine Monero did not sell any token Monero had no presale of any kind Proof of Work \u00b6 CryptoNight v0 since block height 0 v1 since block height 1546000 (forked on 2018-04-06) Changes every ~6 months to discourage ASIC-s Difficulty retarget \u00b6 every block based on the last 720 blocks (24h), excluding 20% of the timestamp outliers Block time \u00b6 2 minutes may change in the future as long as emission curve is preserved Block reward \u00b6 smoothly decreasing and subject to penalties for blocks greater then median size of the last 100 blocks (M100) ~4 XMR as of Aug 2018; for the current reward check the coinbase transaction of the latest block Block size \u00b6 dynamic maximum of two times the median size of the last 100 blocks (2 * M100) ~100KB as of Aug 2018; check the latest block size Emission curve \u00b6 Main emission \u00b6 first, the main emission is about to produce ~18.132 million coins by the end of May 2022 as of Aug 2018 the emission is about 20 XMR per 10 minutes see charts and details Tail emission \u00b6 the tail emission kicks in once main emission is done it will produce 0.6 XMR per 2-minute block this translates to <1% inflation decreasing over time Max supply \u00b6 ~18.132 million XMR + 0.6 XMR per 2 minutes technically infinite but practicaly deflationary if accounted for lost coins Sender privacy \u00b6 ring signatures assurance: probabilistic / plausible deniability Recipient privacy \u00b6 stealth addresses assurance: strong Amount privacy \u00b6 ring confidential transactions assurance: strong IP address privacy \u00b6 there is an ongoing effort to integrate I2P into Monero - the Kovri project assurance: none at the moment - please use TOR or I2P","title":"Technical specs"},{"location":"technical-specs/#monero-technical-specs","text":"","title":"Monero Technical Specs"},{"location":"technical-specs/#live","text":"Monero blockchain is live since 18 April 2014","title":"Live"},{"location":"technical-specs/#no-premine-no-instamine-no-ico-no-token","text":"Monero had no premine or instamine Monero did not sell any token Monero had no presale of any kind","title":"No premine, no instamine, no ICO, no token"},{"location":"technical-specs/#proof-of-work","text":"CryptoNight v0 since block height 0 v1 since block height 1546000 (forked on 2018-04-06) Changes every ~6 months to discourage ASIC-s","title":"Proof of Work"},{"location":"technical-specs/#difficulty-retarget","text":"every block based on the last 720 blocks (24h), excluding 20% of the timestamp outliers","title":"Difficulty retarget"},{"location":"technical-specs/#block-time","text":"2 minutes may change in the future as long as emission curve is preserved","title":"Block time"},{"location":"technical-specs/#block-reward","text":"smoothly decreasing and subject to penalties for blocks greater then median size of the last 100 blocks (M100) ~4 XMR as of Aug 2018; for the current reward check the coinbase transaction of the latest block","title":"Block reward"},{"location":"technical-specs/#block-size","text":"dynamic maximum of two times the median size of the last 100 blocks (2 * M100) ~100KB as of Aug 2018; check the latest block size","title":"Block size"},{"location":"technical-specs/#emission-curve","text":"","title":"Emission curve"},{"location":"technical-specs/#main-emission","text":"first, the main emission is about to produce ~18.132 million coins by the end of May 2022 as of Aug 2018 the emission is about 20 XMR per 10 minutes see charts and details","title":"Main emission"},{"location":"technical-specs/#tail-emission","text":"the tail emission kicks in once main emission is done it will produce 0.6 XMR per 2-minute block this translates to <1% inflation decreasing over time","title":"Tail emission"},{"location":"technical-specs/#max-supply","text":"~18.132 million XMR + 0.6 XMR per 2 minutes technically infinite but practicaly deflationary if accounted for lost coins","title":"Max supply"},{"location":"technical-specs/#sender-privacy","text":"ring signatures assurance: probabilistic / plausible deniability","title":"Sender privacy"},{"location":"technical-specs/#recipient-privacy","text":"stealth addresses assurance: strong","title":"Recipient privacy"},{"location":"technical-specs/#amount-privacy","text":"ring confidential transactions assurance: strong","title":"Amount privacy"},{"location":"technical-specs/#ip-address-privacy","text":"there is an ongoing effort to integrate I2P into Monero - the Kovri project assurance: none at the moment - please use TOR or I2P","title":"IP address privacy"},{"location":"tx/","text":"Monero transaction \u00b6 https://monero.stackexchange.com/questions/2136/understanding-the-structure-of-a-monero-transaction?noredirect=1&lq=1 https://monero.stackexchange.com/questions/6736/how-does-input-reference-the-output-of-some-transaction?noredirect=1&lq=1","title":"Monero transaction"},{"location":"tx/#monero-transaction","text":"https://monero.stackexchange.com/questions/2136/understanding-the-structure-of-a-monero-transaction?noredirect=1&lq=1 https://monero.stackexchange.com/questions/6736/how-does-input-reference-the-output-of-some-transaction?noredirect=1&lq=1","title":"Monero transaction"},{"location":"cryptography/base58/","text":"Base58 \u00b6 Base58 is a binary-to-text encoding scheme. It is similar to Base64 but has been modified to avoid both non-alphanumeric characters and letters which might look ambiguous when printed. The characters excluded in relation to Base64 are: IOl0+/ Base58 does not strictly specify the format. This results in some implementations being incompatible with others, for example with regard to alphabet order. For details, see Wikipedia . Base58 in Monero \u00b6 Monero has its own variant of Base58. In Monero the Base58 encoding is performed in 8-byte blocks, except the last block which is the remaining (8 or less) bytes . The 8-byte block converts to 11 or less Base58 characters. If the block converted to less then 11 characters, the output is padded with \"1\"s (0 in Base58). The final block is padded as well to whatever would be the maximum size of this number of bytes encoded in Base58. The advantage of Monero implementation is that output is of a fixed size which is not the case with plain Base58. The disadvantage is that default libraries won't work. For details, see reference C++ Base58 implementation and unofficial Python Base58 implementation.","title":"Base58"},{"location":"cryptography/base58/#base58","text":"Base58 is a binary-to-text encoding scheme. It is similar to Base64 but has been modified to avoid both non-alphanumeric characters and letters which might look ambiguous when printed. The characters excluded in relation to Base64 are: IOl0+/ Base58 does not strictly specify the format. This results in some implementations being incompatible with others, for example with regard to alphabet order. For details, see Wikipedia .","title":"Base58"},{"location":"cryptography/base58/#base58-in-monero","text":"Monero has its own variant of Base58. In Monero the Base58 encoding is performed in 8-byte blocks, except the last block which is the remaining (8 or less) bytes . The 8-byte block converts to 11 or less Base58 characters. If the block converted to less then 11 characters, the output is padded with \"1\"s (0 in Base58). The final block is padded as well to whatever would be the maximum size of this number of bytes encoded in Base58. The advantage of Monero implementation is that output is of a fixed size which is not the case with plain Base58. The disadvantage is that default libraries won't work. For details, see reference C++ Base58 implementation and unofficial Python Base58 implementation.","title":"Base58 in Monero"},{"location":"cryptography/cryptonight/","text":"CryptoNight Proof of Work \u00b6 Possibly the most controversial aspect of Monero (and other CryptoNote coins) is the CryptoNight Proof of Work, composed of 7 functions. Fortunately, the difficulty would auto-adjust should any major PoW \"shortcuts\" be discovered. Still, it poses theoretical centralization risk, if the attacker manages to keep PoW exploit secret.","title":"CryptoNight Proof of Work"},{"location":"cryptography/cryptonight/#cryptonight-proof-of-work","text":"Possibly the most controversial aspect of Monero (and other CryptoNote coins) is the CryptoNight Proof of Work, composed of 7 functions. Fortunately, the difficulty would auto-adjust should any major PoW \"shortcuts\" be discovered. Still, it poses theoretical centralization risk, if the attacker manages to keep PoW exploit secret.","title":"CryptoNight Proof of Work"},{"location":"cryptography/introduction/","text":"Cryptography in Monero \u00b6 Monero uses a wide variety of cryptographic primitives for various use cases. Comparing to altcoins, Monero cryptography is considered conservative, sound and robust. Comparing to Bitcoin, Monero uses much more primitives, and some of them are more advanced, especially those related to privacy and Proof of Work. Some choices are deliberately non-standard (for better or worse) - oftentimes a legacy of the CryptoNote protocol.","title":"Introduction"},{"location":"cryptography/introduction/#cryptography-in-monero","text":"Monero uses a wide variety of cryptographic primitives for various use cases. Comparing to altcoins, Monero cryptography is considered conservative, sound and robust. Comparing to Bitcoin, Monero uses much more primitives, and some of them are more advanced, especially those related to privacy and Proof of Work. Some choices are deliberately non-standard (for better or worse) - oftentimes a legacy of the CryptoNote protocol.","title":"Cryptography in Monero"},{"location":"cryptography/keccak-256/","text":"Keccak-256 hash function \u00b6 Monero employs Keccak as a hashing function. In most context specifically Keccak-256 is used, providing 32-byte hashes. Keccak is the leading hashing function, designed by non-NSA designers. Keccak won NIST competition to become the official SHA3. Use Cases \u00b6 Monero does not employ Keccak for Proof-of-Work. Instead, Keccak is used for: random number generator block hashing transaction hashing stealth address private key image (for double spend protection) public address checksum RingCT multisig bulletproofs ...and likely a few other things. Keccak-256 vs SHA3-256 \u00b6 SHA3-256 is Keccak-256, except NIST changed padding. For that reason original Keccak-256 gives in a different hash value than NIST SHA3-256. Monero uses original Keccak-256. The NIST standard was only published on August 2015, while Monero went live on 18 April 2014. Reference \u00b6 Keccak source code used in Monero SHA3 on Wikipedia Keccak-256 vs SHA3-256 explained on Ethereum stackexchange Online tool to calculate Keccak-256 and SHA3-256","title":"Keccak-256"},{"location":"cryptography/keccak-256/#keccak-256-hash-function","text":"Monero employs Keccak as a hashing function. In most context specifically Keccak-256 is used, providing 32-byte hashes. Keccak is the leading hashing function, designed by non-NSA designers. Keccak won NIST competition to become the official SHA3.","title":"Keccak-256 hash function"},{"location":"cryptography/keccak-256/#use-cases","text":"Monero does not employ Keccak for Proof-of-Work. Instead, Keccak is used for: random number generator block hashing transaction hashing stealth address private key image (for double spend protection) public address checksum RingCT multisig bulletproofs ...and likely a few other things.","title":"Use Cases"},{"location":"cryptography/keccak-256/#keccak-256-vs-sha3-256","text":"SHA3-256 is Keccak-256, except NIST changed padding. For that reason original Keccak-256 gives in a different hash value than NIST SHA3-256. Monero uses original Keccak-256. The NIST standard was only published on August 2015, while Monero went live on 18 April 2014.","title":"Keccak-256 vs SHA3-256"},{"location":"cryptography/keccak-256/#reference","text":"Keccak source code used in Monero SHA3 on Wikipedia Keccak-256 vs SHA3-256 explained on Ethereum stackexchange Online tool to calculate Keccak-256 and SHA3-256","title":"Reference"},{"location":"cryptography/prng/","text":"Monero Pseudorandom Number Generator \u00b6 Monero uses PRNG based on the Keccak hashing function. Basically, output of the previous hashing round is input for the next one. The initial seed comes from entropy sources provided by operating system. On Linux and MacOS the seed comes from /dev/urandom . On Windows the WinAPI CryptGenRandom call is used for seeding. There is no reseeding. Caveats \u00b6 This concerns the reference C++ implementation of Monero. Please note there are many alternative implementations of private key generation, including JavaScript, Python, Android/Java. These should be researched case by case for correctness. In Monero source code you can also find libsodium based random bytes generator. It is part of the embedded library and apparently is not used in actual Monero code. Reference \u00b6 Source code StackExchange answer","title":"PRNG"},{"location":"cryptography/prng/#monero-pseudorandom-number-generator","text":"Monero uses PRNG based on the Keccak hashing function. Basically, output of the previous hashing round is input for the next one. The initial seed comes from entropy sources provided by operating system. On Linux and MacOS the seed comes from /dev/urandom . On Windows the WinAPI CryptGenRandom call is used for seeding. There is no reseeding.","title":"Monero Pseudorandom Number Generator"},{"location":"cryptography/prng/#caveats","text":"This concerns the reference C++ implementation of Monero. Please note there are many alternative implementations of private key generation, including JavaScript, Python, Android/Java. These should be researched case by case for correctness. In Monero source code you can also find libsodium based random bytes generator. It is part of the embedded library and apparently is not used in actual Monero code.","title":"Caveats"},{"location":"cryptography/prng/#reference","text":"Source code StackExchange answer","title":"Reference"},{"location":"cryptography/asymmetric/ed25519/","text":"Ed25519 curve \u00b6 Note Author is nowhere close to being a cryptographer. Be sceptical on accuracy. Note This article is only about the underlying curve. Public key derivation and signing algorithm will be treated separately. Monero employs Ed25519 elliptic curve as a basis for its key pair generation. However, Monero does not exactly follow EdDSA reference signature scheme. Definition \u00b6 This is the standard Ed25519 curve definition, no Monero specific stuff here, except the naming convention. The convention comes from the CryptoNote whitepaper and is widely used in Monero literature. Curve equation \u00b6 \u2212x^2 + y^2 = 1 \u2212 (121665/121666) * x^2 * y^2 Note: curve is in two dimensions (nothing fancy, like all the curves is high school) curve is mirrored below y axis due to y^2 part of the equation (not a polynomial) Base point G \u00b6 The base point is a specific point on the curve. It is used as a basis for further calculations. It is an arbitrary choice by the curve authors, just to standardize the scheme. Note that it is enough to specify the y value and the sign of the x value. That's because the specific x can be calculated from the curve equation. G = (x, 4/5) # take the point with the positive x # The hex representation of the base point 5866666666666666666666666666666666666666666666666666666666666666 Prime order of the base point l \u00b6 In layment terms, the \"canvas\" where the curve is drawn is assumed to have a finite \"resolution\", so point coordinates must \"wrap around\" at some point. This is achieved by modulo the l value (lowercase L). In other words, the l defines the maximum scalar we can use. l = 2^252 + 27742317777372353535851937790883648493 The l is a prime number specified by the curve authors. In practice this is the private key's strength. Total number of points on the curve \u00b6 The total number of points on the curve is also a prime number: q = 2^255 - 19 In practice not all points are \"useful\" and so the private key strength is limited to l describe above. Implementation \u00b6 Monero uses (apparently modified) Ref10 implementation by Daniel J. Bernstein. Reference \u00b6 Understanding Monero Cryptography - excellent writeup by Luigi StackOverflow answer Python implementation - not the reference one but easier to understand Encoding point to hex Ed25519 on Wikipedia A (Relatively Easy To Understand) Primer on Elliptic Curve Cryptography","title":"Ed25519 curve"},{"location":"cryptography/asymmetric/ed25519/#ed25519-curve","text":"Note Author is nowhere close to being a cryptographer. Be sceptical on accuracy. Note This article is only about the underlying curve. Public key derivation and signing algorithm will be treated separately. Monero employs Ed25519 elliptic curve as a basis for its key pair generation. However, Monero does not exactly follow EdDSA reference signature scheme.","title":"Ed25519 curve"},{"location":"cryptography/asymmetric/ed25519/#definition","text":"This is the standard Ed25519 curve definition, no Monero specific stuff here, except the naming convention. The convention comes from the CryptoNote whitepaper and is widely used in Monero literature.","title":"Definition"},{"location":"cryptography/asymmetric/ed25519/#curve-equation","text":"\u2212x^2 + y^2 = 1 \u2212 (121665/121666) * x^2 * y^2 Note: curve is in two dimensions (nothing fancy, like all the curves is high school) curve is mirrored below y axis due to y^2 part of the equation (not a polynomial)","title":"Curve equation"},{"location":"cryptography/asymmetric/ed25519/#base-point-g","text":"The base point is a specific point on the curve. It is used as a basis for further calculations. It is an arbitrary choice by the curve authors, just to standardize the scheme. Note that it is enough to specify the y value and the sign of the x value. That's because the specific x can be calculated from the curve equation. G = (x, 4/5) # take the point with the positive x # The hex representation of the base point 5866666666666666666666666666666666666666666666666666666666666666","title":"Base point G"},{"location":"cryptography/asymmetric/ed25519/#prime-order-of-the-base-point-l","text":"In layment terms, the \"canvas\" where the curve is drawn is assumed to have a finite \"resolution\", so point coordinates must \"wrap around\" at some point. This is achieved by modulo the l value (lowercase L). In other words, the l defines the maximum scalar we can use. l = 2^252 + 27742317777372353535851937790883648493 The l is a prime number specified by the curve authors. In practice this is the private key's strength.","title":"Prime order of the base point l"},{"location":"cryptography/asymmetric/ed25519/#total-number-of-points-on-the-curve","text":"The total number of points on the curve is also a prime number: q = 2^255 - 19 In practice not all points are \"useful\" and so the private key strength is limited to l describe above.","title":"Total number of points on the curve"},{"location":"cryptography/asymmetric/ed25519/#implementation","text":"Monero uses (apparently modified) Ref10 implementation by Daniel J. Bernstein.","title":"Implementation"},{"location":"cryptography/asymmetric/ed25519/#reference","text":"Understanding Monero Cryptography - excellent writeup by Luigi StackOverflow answer Python implementation - not the reference one but easier to understand Encoding point to hex Ed25519 on Wikipedia A (Relatively Easy To Understand) Primer on Elliptic Curve Cryptography","title":"Reference"},{"location":"cryptography/asymmetric/introduction/","text":"Asymmetric cryptography in Monero \u00b6 Note Author is nowhere close to being a cryptographer. Be sceptical on accuracy. Before we get to Monero specific stuff, a little bit of context. We are talking asymmetric cryptography here. The \"asymmetric\" simply means the are two keys: the private key (used primarily for signing data and for decrypting data) the public key (used primarily for signature verification and encrypting data) This is in contrast to symmetric cryptography which uses a single (secret) key. Historically, asymmetric cryptography was based on the problem of factorization of a very large integers back into prime numbers (which is practically impossible for large enough integers). Recently, asymmetric cryptography is based on a mathematical notion of elliptic curves. Ed25519 is a specific, well researched and standardized elliptic curve used in Monero.","title":"Introduction"},{"location":"cryptography/asymmetric/introduction/#asymmetric-cryptography-in-monero","text":"Note Author is nowhere close to being a cryptographer. Be sceptical on accuracy. Before we get to Monero specific stuff, a little bit of context. We are talking asymmetric cryptography here. The \"asymmetric\" simply means the are two keys: the private key (used primarily for signing data and for decrypting data) the public key (used primarily for signature verification and encrypting data) This is in contrast to symmetric cryptography which uses a single (secret) key. Historically, asymmetric cryptography was based on the problem of factorization of a very large integers back into prime numbers (which is practically impossible for large enough integers). Recently, asymmetric cryptography is based on a mathematical notion of elliptic curves. Ed25519 is a specific, well researched and standardized elliptic curve used in Monero.","title":"Asymmetric cryptography in Monero"},{"location":"cryptography/asymmetric/key-image/","text":"Monero private key image \u00b6 Note Author is nowhere close to being a cryptographer. Be sceptical on accuracy. Private key image serves to detect double spending attempts. In Monero funds are always sent to a one-time public key P . Related one-time private key x is specific to unspent output. As output can be spent only once (in whole), the related private key can be used only once as well. Thus, specific private key image I being present on the blockchain means that related output was already spent, and subsequent attempts must not be allowed. This whole scheme is necessary because Monero uses Ring Signatures which make it impossible to know whom exactly signed the transaction. This is why a simple Bitcoin-like double spending check wouldn't work here. Definition \u00b6 I = x*Hp(P) Where: I - private key image (or \"key image\" for short) x - one-time private key used to unlock an unspent output P - one-time public key of an unspent output Hp() - hash function accepting an EC point as an argument The P comes from this: P = xG Where G is the Ed25519 base point. Substitute P with xG and we get: I = x*Hp(xG) The key image I is a one-way function of the private key x . Reference \u00b6 StackExchange answer Another SE answer Critical bug regarding key image verification that was once present in Monero","title":"Key image"},{"location":"cryptography/asymmetric/key-image/#monero-private-key-image","text":"Note Author is nowhere close to being a cryptographer. Be sceptical on accuracy. Private key image serves to detect double spending attempts. In Monero funds are always sent to a one-time public key P . Related one-time private key x is specific to unspent output. As output can be spent only once (in whole), the related private key can be used only once as well. Thus, specific private key image I being present on the blockchain means that related output was already spent, and subsequent attempts must not be allowed. This whole scheme is necessary because Monero uses Ring Signatures which make it impossible to know whom exactly signed the transaction. This is why a simple Bitcoin-like double spending check wouldn't work here.","title":"Monero private key image"},{"location":"cryptography/asymmetric/key-image/#definition","text":"I = x*Hp(P) Where: I - private key image (or \"key image\" for short) x - one-time private key used to unlock an unspent output P - one-time public key of an unspent output Hp() - hash function accepting an EC point as an argument The P comes from this: P = xG Where G is the Ed25519 base point. Substitute P with xG and we get: I = x*Hp(xG) The key image I is a one-way function of the private key x .","title":"Definition"},{"location":"cryptography/asymmetric/key-image/#reference","text":"StackExchange answer Another SE answer Critical bug regarding key image verification that was once present in Monero","title":"Reference"},{"location":"cryptography/asymmetric/private-key/","text":"Private keys in Monero \u00b6 Note Author is nowhere close to being a cryptographer. Be sceptical on accuracy. In Monero, the root private key is generated randomly . Other private keys are derived deterministically from the root private key. Private key must be kept secret. Private key is a large integer impossible to guess, like: 108555083659983933209597798445644913612440610624038028786991485007418559037440 Private key is 256 bits long. Private key is a scalar , meaning it is a single value. In equations scalars are represented by lowercase letters . Relation to Ed25519 \u00b6 Being simply a random integer, private key is not specific to any particular asymmetric cryptography scheme. In context of Monero EC cryptography the private key is a number the base point G is multiplied by. The result of the multiplication is the public key P (another point on the curve). Multiplication of a point by a number has a very special definition in EC cryptography. See this this guide for details. Key strength \u00b6 Before deriving Ed25519 public key, the private key is subject to modulo l , where l is the maximum scalar allowed by the Ed25519 scheme . The l is on the order of 2^252, so the effective key strength is technically 252 bits, not 256 bits. This is standard for EC cryptography and is more of a cosmetic nuance than any concern. Encoding \u00b6 In user-facing contexts, the private key integer is: Taken modulo l to avoid malleability Put as array of 32 bytes in a little-endian direction (the first byte is the least significant) Converted to hexadecimal form, like: b3588a87056fb21dc4d052d59e83b54293882e646b543c29478e4cf45c28a402 Private spend key \u00b6 Private spend key is used to spend moneros. More specifically, it is used to build one-time private keys which allow to spend related outputs. Private view key \u00b6 Private view key is used to recognize your incoming transactions on the otherwise opaque blockchain. One-time private keys \u00b6 One-time private key like construct is used in stealth addresses .","title":"Private keys"},{"location":"cryptography/asymmetric/private-key/#private-keys-in-monero","text":"Note Author is nowhere close to being a cryptographer. Be sceptical on accuracy. In Monero, the root private key is generated randomly . Other private keys are derived deterministically from the root private key. Private key must be kept secret. Private key is a large integer impossible to guess, like: 108555083659983933209597798445644913612440610624038028786991485007418559037440 Private key is 256 bits long. Private key is a scalar , meaning it is a single value. In equations scalars are represented by lowercase letters .","title":"Private keys in Monero"},{"location":"cryptography/asymmetric/private-key/#relation-to-ed25519","text":"Being simply a random integer, private key is not specific to any particular asymmetric cryptography scheme. In context of Monero EC cryptography the private key is a number the base point G is multiplied by. The result of the multiplication is the public key P (another point on the curve). Multiplication of a point by a number has a very special definition in EC cryptography. See this this guide for details.","title":"Relation to Ed25519"},{"location":"cryptography/asymmetric/private-key/#key-strength","text":"Before deriving Ed25519 public key, the private key is subject to modulo l , where l is the maximum scalar allowed by the Ed25519 scheme . The l is on the order of 2^252, so the effective key strength is technically 252 bits, not 256 bits. This is standard for EC cryptography and is more of a cosmetic nuance than any concern.","title":"Key strength"},{"location":"cryptography/asymmetric/private-key/#encoding","text":"In user-facing contexts, the private key integer is: Taken modulo l to avoid malleability Put as array of 32 bytes in a little-endian direction (the first byte is the least significant) Converted to hexadecimal form, like: b3588a87056fb21dc4d052d59e83b54293882e646b543c29478e4cf45c28a402","title":"Encoding"},{"location":"cryptography/asymmetric/private-key/#private-spend-key","text":"Private spend key is used to spend moneros. More specifically, it is used to build one-time private keys which allow to spend related outputs.","title":"Private spend key"},{"location":"cryptography/asymmetric/private-key/#private-view-key","text":"Private view key is used to recognize your incoming transactions on the otherwise opaque blockchain.","title":"Private view key"},{"location":"cryptography/asymmetric/private-key/#one-time-private-keys","text":"One-time private key like construct is used in stealth addresses .","title":"One-time private keys"},{"location":"cryptography/asymmetric/public-key/","text":"Public keys in Monero \u00b6 Note Author is nowhere close to being a cryptographer. Be sceptical on accuracy. Public key is deterministically derived from private key based on Ed25519 curve with a little Monero-specific twist. Public key is meant to be shared. Assuming correct implementation, it is not practically possible to recover private key from public key. Public key is a point (x,y) on the elliptic curve. In equations points are represented by uppercase letters . In user-facing contexts, public key is encoded in a little-endian hexadecimal form, like: 016a941812293cf9a86071060fb090ab38d67945e659968cb8cf30e1bc725683 Deriving public key \u00b6 Say: P is a public key x is a private key G is a \"base point\"; this is simply a constant specific to Ed25519 ; this point lies on the elliptic curve Then: P = xG The public key is simply the base point (G) multiplied by the private key (x). Multiplying the point is adding the point to itself a number of times. However, the addition is not a simple vector addition. It has a very specific definition nicely described in this article . What is important is that result of addition is always a point on the curve. For example, G + G is another point on the curve. Use cases \u00b6 Monero address is composed of public spend key and public view key. These keys are used to build stealth addresses to receive payments.","title":"Public keys"},{"location":"cryptography/asymmetric/public-key/#public-keys-in-monero","text":"Note Author is nowhere close to being a cryptographer. Be sceptical on accuracy. Public key is deterministically derived from private key based on Ed25519 curve with a little Monero-specific twist. Public key is meant to be shared. Assuming correct implementation, it is not practically possible to recover private key from public key. Public key is a point (x,y) on the elliptic curve. In equations points are represented by uppercase letters . In user-facing contexts, public key is encoded in a little-endian hexadecimal form, like: 016a941812293cf9a86071060fb090ab38d67945e659968cb8cf30e1bc725683","title":"Public keys in Monero"},{"location":"cryptography/asymmetric/public-key/#deriving-public-key","text":"Say: P is a public key x is a private key G is a \"base point\"; this is simply a constant specific to Ed25519 ; this point lies on the elliptic curve Then: P = xG The public key is simply the base point (G) multiplied by the private key (x). Multiplying the point is adding the point to itself a number of times. However, the addition is not a simple vector addition. It has a very specific definition nicely described in this article . What is important is that result of addition is always a point on the curve. For example, G + G is another point on the curve.","title":"Deriving public key"},{"location":"cryptography/asymmetric/public-key/#use-cases","text":"Monero address is composed of public spend key and public view key. These keys are used to build stealth addresses to receive payments.","title":"Use cases"},{"location":"interacting/monerod/","text":"monerod \u00b6 https://www.reddit.com/r/Monero/comments/3jhyqc/0mq_help_share_this_exciting_news/ https://monero.stackexchange.com/questions/1482/how-much-information-is-passed-from-the-daemon-to-simplewallet-when-scanning-for?rq=1 https://monero.stackexchange.com/questions/1134/is-it-safe-to-share-a-daemon-with-a-roommate?noredirect=1&lq=1 The Monero daemon is the piece of software that keeps you synced up with the Monero network. That's all it does, it doesn't know about \"you\" or \"your funds\" or \"your transactions\". If you want to do anything on the Monero network, and thus on the Monero blockchain, you have to talk to this daemon that will then talk to the network as a whole by rebroadcasting transactions you initiate. Similarly, if you want to get history from the blockchain, or the current memory pool of transactions, or outputs to mix with, you can ask the daemon for that information.","title":"monerod"},{"location":"interacting/monerod/#monerod","text":"https://www.reddit.com/r/Monero/comments/3jhyqc/0mq_help_share_this_exciting_news/ https://monero.stackexchange.com/questions/1482/how-much-information-is-passed-from-the-daemon-to-simplewallet-when-scanning-for?rq=1 https://monero.stackexchange.com/questions/1134/is-it-safe-to-share-a-daemon-with-a-roommate?noredirect=1&lq=1 The Monero daemon is the piece of software that keeps you synced up with the Monero network. That's all it does, it doesn't know about \"you\" or \"your funds\" or \"your transactions\". If you want to do anything on the Monero network, and thus on the Monero blockchain, you have to talk to this daemon that will then talk to the network as a whole by rebroadcasting transactions you initiate. Similarly, if you want to get history from the blockchain, or the current memory pool of transactions, or outputs to mix with, you can ask the daemon for that information.","title":"monerod"},{"location":"interacting/overview/","text":"Interacting with Monero \u00b6 You can interact with Monero via desktop GUI, commandline interface, and programming API. On top of that, Monero nodes interact with each other in a peer-to-peer network. Installation directory overview \u00b6 Download Monero . Once unpacked you will see several executable files. Monero project nicely decouples node logic monerod from wallet logic monero-wallet-* . Wallet logic is offered through three independent user interfaces - the GUI, the CLI, and the HTTP API. Executable Description monerod The full node daemon. Does not require a wallet. monero-wallet-gui Wallet logic and graphical user interface. Requires monerod running. monero-wallet-cli Wallet logic and commandline user interface. Requires monerod running. monero-wallet-rpc Wallet logic and HTTP API (JSON-RPC protocol). Requires monerod running. monero-blockchain-export Tool to export blockchain to blockchain.raw file. monero-blockchain-import Tool to import blockchain.raw - ideally your own trusted copy. monero-gen-trusted-multisig Tool to generate a set of multisig wallets. See chapter on multisignatures . monero-blockchain-blackball Advanced tool to mitigate privacy issues related to Monero forks. See the commit and pull request . monero-blockchain-usage Advanced tool to mitigate privacy issues related to Monero forks. See the commit and the pull request . Interacting \u00b6 There are quite a few ways you can interact with Monero software. Perhaps the most surprising for newcomers is that monerod daemon accepts interactive keyboard commands while it is running. Also, please note that HTTP API is split across monerod and monero-wallet-rpc . You need to run and call both daemons to explore the full API. This follows the node-logic vs wallet-logic split mentioned earlier. All wallet implementations depend on the monerod running. Executable p2p network node commands via keyboard node HTTP API wallet commands via keyboard wallet HTTP API wallet via GUI monerod \u2714 \u2714 \u2714 monero-wallet-cli \u2714 monero-wallet-rpc \u2714 monero-wallet-gui \u2714","title":"Interacting"},{"location":"interacting/overview/#interacting-with-monero","text":"You can interact with Monero via desktop GUI, commandline interface, and programming API. On top of that, Monero nodes interact with each other in a peer-to-peer network.","title":"Interacting with Monero"},{"location":"interacting/overview/#installation-directory-overview","text":"Download Monero . Once unpacked you will see several executable files. Monero project nicely decouples node logic monerod from wallet logic monero-wallet-* . Wallet logic is offered through three independent user interfaces - the GUI, the CLI, and the HTTP API. Executable Description monerod The full node daemon. Does not require a wallet. monero-wallet-gui Wallet logic and graphical user interface. Requires monerod running. monero-wallet-cli Wallet logic and commandline user interface. Requires monerod running. monero-wallet-rpc Wallet logic and HTTP API (JSON-RPC protocol). Requires monerod running. monero-blockchain-export Tool to export blockchain to blockchain.raw file. monero-blockchain-import Tool to import blockchain.raw - ideally your own trusted copy. monero-gen-trusted-multisig Tool to generate a set of multisig wallets. See chapter on multisignatures . monero-blockchain-blackball Advanced tool to mitigate privacy issues related to Monero forks. See the commit and pull request . monero-blockchain-usage Advanced tool to mitigate privacy issues related to Monero forks. See the commit and the pull request .","title":"Installation directory overview"},{"location":"interacting/overview/#interacting","text":"There are quite a few ways you can interact with Monero software. Perhaps the most surprising for newcomers is that monerod daemon accepts interactive keyboard commands while it is running. Also, please note that HTTP API is split across monerod and monero-wallet-rpc . You need to run and call both daemons to explore the full API. This follows the node-logic vs wallet-logic split mentioned earlier. All wallet implementations depend on the monerod running. Executable p2p network node commands via keyboard node HTTP API wallet commands via keyboard wallet HTTP API wallet via GUI monerod \u2714 \u2714 \u2714 monero-wallet-cli \u2714 monero-wallet-rpc \u2714 monero-wallet-gui \u2714","title":"Interacting"},{"location":"public-address/integrated-address/","text":"Integrated address \u00b6 Monero integrated address embeds a compact payment ID. Use integrated address to learn for what you are being paid. It is ideal for accepting Monero in an automated fashion, like online stores and exchanges. You should allow Monero software to generate integrated addresses for you (instead of forcing your own payment IDs). Please note these are Monero technical payment IDs and must not be confused with business identifiers like order number or invoice number. The transaction to integrated address will not reveal the payment ID publicly. Payment ID in a transaction will be encrypted with a shared secret (one-time random key known only to sender and recipient). Only the recipient will be able to match the transaction against payment ID. TODO: explain how exactly payment IDs are encoded in transactions. Monero integrated address obsoletes the former practice of using full 32-bytes payment ID in a transaction extra field (where it was not encrypted). Data structure ( src ): Index Size in bytes Description 0 1 identifies the network and address type; 19 - main chain; 54 - test chain 1 32 public spend key 33 32 public view key 65 8 compact payment ID - 8 bytes randomly generated by the recipient; note that it does not need encryption in the address itself but it is hidden in a transaction paying to integrated address to prevent linking payment with the address by external observers 73 4 checksum ( Keccak-f[1600] hash of the previous 73 bytes, trimmed to first 4 bytes) It totals to 78 bytes. The bytes are then encoded ( src ) in Monero specific Base58 format, resulting in a 106 chars long string. Example integrated address: 4LL9oSLmtpccfufTMvppY6JwXNouMBzSkbLYfpAV5Usx3skxNgYeYTRj5UzqtReoS44qo9mtmXCqY45DJ852K5Jv2bYXZKKQePHES9khPK Caveats \u00b6 Single transaction cannot pay to multiple integrated addresses. Reference \u00b6 question on StackExchenge","title":"Integrated"},{"location":"public-address/integrated-address/#integrated-address","text":"Monero integrated address embeds a compact payment ID. Use integrated address to learn for what you are being paid. It is ideal for accepting Monero in an automated fashion, like online stores and exchanges. You should allow Monero software to generate integrated addresses for you (instead of forcing your own payment IDs). Please note these are Monero technical payment IDs and must not be confused with business identifiers like order number or invoice number. The transaction to integrated address will not reveal the payment ID publicly. Payment ID in a transaction will be encrypted with a shared secret (one-time random key known only to sender and recipient). Only the recipient will be able to match the transaction against payment ID. TODO: explain how exactly payment IDs are encoded in transactions. Monero integrated address obsoletes the former practice of using full 32-bytes payment ID in a transaction extra field (where it was not encrypted). Data structure ( src ): Index Size in bytes Description 0 1 identifies the network and address type; 19 - main chain; 54 - test chain 1 32 public spend key 33 32 public view key 65 8 compact payment ID - 8 bytes randomly generated by the recipient; note that it does not need encryption in the address itself but it is hidden in a transaction paying to integrated address to prevent linking payment with the address by external observers 73 4 checksum ( Keccak-f[1600] hash of the previous 73 bytes, trimmed to first 4 bytes) It totals to 78 bytes. The bytes are then encoded ( src ) in Monero specific Base58 format, resulting in a 106 chars long string. Example integrated address: 4LL9oSLmtpccfufTMvppY6JwXNouMBzSkbLYfpAV5Usx3skxNgYeYTRj5UzqtReoS44qo9mtmXCqY45DJ852K5Jv2bYXZKKQePHES9khPK","title":"Integrated address"},{"location":"public-address/integrated-address/#caveats","text":"Single transaction cannot pay to multiple integrated addresses.","title":"Caveats"},{"location":"public-address/integrated-address/#reference","text":"question on StackExchenge","title":"Reference"},{"location":"public-address/standard-address/","text":"Address \u00b6 Monero public address is what you publish to get paid. An address can be generated offline and for free. It boils down to generating a large random number representing your private spending key. Publishing your Monero address does not endanger your privacy. That's because in Monero transactions go to stealth addresses which are decoupled from your public address. There are a few types of public addresses in Monero: Standard address - the basic type of the address, also refered to as raw address Integrated address - embeds payment ID so you can learn for what you are being paid Subaddress - slightly enhances privacy and allows for organizing your funds in subaccounts within a single wallet Standard address \u00b6 The raw address is useful for things like donations (where you don't care who donated) or exchange withdrawals (where you know the payer out of band). Its strength is simplicity. Monero standard address is composed of two public keys: public spend key public view key It also contains a checksum and a \"network byte\" which actually identifies both the network and the address type. Data structure ( src ): Index Size in bytes Description 0 1 identifies the network and address type; 18 - main chain; 53 - test chain 1 32 public spend key 33 32 public view key 65 4 checksum ( Keccak-f[1600] hash of the previous 65 bytes, trimmed to first 4 bytes) It totals to 69 bytes. The bytes are then encoded ( src ) in Monero specific Base58 format, resulting in a 95 chars long string. Example standard address: 4AdUndXHHZ6cfufTMvppY6JwXNouMBzSkbLYfpAV5Usx3skxNgYeYTRj5UzqtReoS44qo9mtmXCqY45DJ852K5Jv2684Rge Generating \u00b6 Standard address is derived from the root private key. TODO: describe. Reference \u00b6 StackExchenge answer https://xmr.llcoins.net/addresstests.html","title":"Standard"},{"location":"public-address/standard-address/#address","text":"Monero public address is what you publish to get paid. An address can be generated offline and for free. It boils down to generating a large random number representing your private spending key. Publishing your Monero address does not endanger your privacy. That's because in Monero transactions go to stealth addresses which are decoupled from your public address. There are a few types of public addresses in Monero: Standard address - the basic type of the address, also refered to as raw address Integrated address - embeds payment ID so you can learn for what you are being paid Subaddress - slightly enhances privacy and allows for organizing your funds in subaccounts within a single wallet","title":"Address"},{"location":"public-address/standard-address/#standard-address","text":"The raw address is useful for things like donations (where you don't care who donated) or exchange withdrawals (where you know the payer out of band). Its strength is simplicity. Monero standard address is composed of two public keys: public spend key public view key It also contains a checksum and a \"network byte\" which actually identifies both the network and the address type. Data structure ( src ): Index Size in bytes Description 0 1 identifies the network and address type; 18 - main chain; 53 - test chain 1 32 public spend key 33 32 public view key 65 4 checksum ( Keccak-f[1600] hash of the previous 65 bytes, trimmed to first 4 bytes) It totals to 69 bytes. The bytes are then encoded ( src ) in Monero specific Base58 format, resulting in a 95 chars long string. Example standard address: 4AdUndXHHZ6cfufTMvppY6JwXNouMBzSkbLYfpAV5Usx3skxNgYeYTRj5UzqtReoS44qo9mtmXCqY45DJ852K5Jv2684Rge","title":"Standard address"},{"location":"public-address/standard-address/#generating","text":"Standard address is derived from the root private key. TODO: describe.","title":"Generating"},{"location":"public-address/standard-address/#reference","text":"StackExchenge answer https://xmr.llcoins.net/addresstests.html","title":"Reference"},{"location":"public-address/subaddress/","text":"Subaddress \u00b6 Warning This is unreleased feature. Subaddresses serve two purposes described below. Prevent payer from linking your payouts together \u00b6 To prevent the payer from linking your payouts together simply generate a new subaddress for each payout. This way services like Shapeshift wouldn't know it is you again receving Monero. Note it won't help if you have an account with the service. Then your payouts are already linked in the service database, regardless of Monero. Group incoming payments \u00b6 Think income streams. Subaddresses allow to group incoming transactions within a single wallet. User interface allows to assign convenience labels to subaddresses. You may want to organize your incoming funds into a streams like \"donations\", \"work\", etc. This is similar to subaccounts in your bank account. There is a very important difference though. In Monero funds don't really sit on public addresses. Public addresses are conceptually a gateway or a routing mechanism. Funds sit on the unspent outputs. Thus, a single transaction can aggregate and spent outputs from multiple addresses. Why not multiple wallets? \u00b6 The advantage over creating multiple wallets is that you only have a single seed to manage. All subaddresses can be derived from the wallet seed. Additionally, you conveniently manage your subaddresses within a single user interface. Wallet level feature \u00b6 Subaddresses are a wallet-level feature to construct and interpret transactions. They do not affect the consensus. Data structure \u00b6 Subaddress has a dedicated \"network byte\": Index Size in bytes Description 0 1 identifies the network and address type; 42 - main chain; 63 - test chain Otherwise the data structure is the same as for standard address . Each subaddress conceptually has an index (with 0 being the base standard address). The index is not directly included in subaddress structure but is used as input to create the private spend key. Generating \u00b6 The private key m related to a subaddress is derived as follows: m = Hs(a || i) Where: Hs is a Keccak-256 hash function interpreted as integer and modulo l (maximum Ed25519 scalar) a is a private view key i is a subaddress index TODO: describe rest of the procedure. Caveates \u00b6 Subaddress cannot be used to receive transactions having multiple destinations (e.g. pool payouts). Only the standard address (the one with index == 0) can receive such transactions. It is not recommended to sweep all the balances of subaddress to main address in a single transaction. That links the subaddresses together on the blockchain. However, this only concerns privacy against specific sender and the situation will never get worse than not using subaddresses in the first place. If you need to join funds while preserving maximum privacy do it with individual transactions (one per subaddress). Convenience labels are not preserved when recreating from seed. Reference \u00b6 https://github.com/monero-project/monero/pull/2056 https://www.reddit.com/r/Monero/comments/5vgjs2/subaddresses_and_disposable_addresses/","title":"Subaddress"},{"location":"public-address/subaddress/#subaddress","text":"Warning This is unreleased feature. Subaddresses serve two purposes described below.","title":"Subaddress"},{"location":"public-address/subaddress/#prevent-payer-from-linking-your-payouts-together","text":"To prevent the payer from linking your payouts together simply generate a new subaddress for each payout. This way services like Shapeshift wouldn't know it is you again receving Monero. Note it won't help if you have an account with the service. Then your payouts are already linked in the service database, regardless of Monero.","title":"Prevent payer from linking your payouts together"},{"location":"public-address/subaddress/#group-incoming-payments","text":"Think income streams. Subaddresses allow to group incoming transactions within a single wallet. User interface allows to assign convenience labels to subaddresses. You may want to organize your incoming funds into a streams like \"donations\", \"work\", etc. This is similar to subaccounts in your bank account. There is a very important difference though. In Monero funds don't really sit on public addresses. Public addresses are conceptually a gateway or a routing mechanism. Funds sit on the unspent outputs. Thus, a single transaction can aggregate and spent outputs from multiple addresses.","title":"Group incoming payments"},{"location":"public-address/subaddress/#why-not-multiple-wallets","text":"The advantage over creating multiple wallets is that you only have a single seed to manage. All subaddresses can be derived from the wallet seed. Additionally, you conveniently manage your subaddresses within a single user interface.","title":"Why not multiple wallets?"},{"location":"public-address/subaddress/#wallet-level-feature","text":"Subaddresses are a wallet-level feature to construct and interpret transactions. They do not affect the consensus.","title":"Wallet level feature"},{"location":"public-address/subaddress/#data-structure","text":"Subaddress has a dedicated \"network byte\": Index Size in bytes Description 0 1 identifies the network and address type; 42 - main chain; 63 - test chain Otherwise the data structure is the same as for standard address . Each subaddress conceptually has an index (with 0 being the base standard address). The index is not directly included in subaddress structure but is used as input to create the private spend key.","title":"Data structure"},{"location":"public-address/subaddress/#generating","text":"The private key m related to a subaddress is derived as follows: m = Hs(a || i) Where: Hs is a Keccak-256 hash function interpreted as integer and modulo l (maximum Ed25519 scalar) a is a private view key i is a subaddress index TODO: describe rest of the procedure.","title":"Generating"},{"location":"public-address/subaddress/#caveates","text":"Subaddress cannot be used to receive transactions having multiple destinations (e.g. pool payouts). Only the standard address (the one with index == 0) can receive such transactions. It is not recommended to sweep all the balances of subaddress to main address in a single transaction. That links the subaddresses together on the blockchain. However, this only concerns privacy against specific sender and the situation will never get worse than not using subaddresses in the first place. If you need to join funds while preserving maximum privacy do it with individual transactions (one per subaddress). Convenience labels are not preserved when recreating from seed.","title":"Caveates"},{"location":"public-address/subaddress/#reference","text":"https://github.com/monero-project/monero/pull/2056 https://www.reddit.com/r/Monero/comments/5vgjs2/subaddresses_and_disposable_addresses/","title":"Reference"}]}