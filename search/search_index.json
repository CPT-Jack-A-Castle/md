{
    "docs": [
        {
            "location": "/",
            "text": "Unofficial Monero Documentation (2% done)\n\u00b6\n\n\nMonerodocs attempts to organize basic technical knowledge on Monero in one place.\n\n\nThe goal is to educate and onboard power users faster.\n\n\nWhile technical explanations are out there, the information is scattered through reddit posts, git comments, stack exchange answers, chat logs and the source code.\n\n\nThis makes it hard to find complete and up-to-date explanations on advanced topics.\n\n\nIf you spot errors or issues please kindly drop me an email at \nqertoip@gmail.com\n or submit a github pull request.",
            "title": "Home"
        },
        {
            "location": "/#unofficial-monero-documentation-2-done",
            "text": "Monerodocs attempts to organize basic technical knowledge on Monero in one place.  The goal is to educate and onboard power users faster.  While technical explanations are out there, the information is scattered through reddit posts, git comments, stack exchange answers, chat logs and the source code.  This makes it hard to find complete and up-to-date explanations on advanced topics.  If you spot errors or issues please kindly drop me an email at  qertoip@gmail.com  or submit a github pull request.",
            "title": "Unofficial Monero Documentation (2% done)"
        },
        {
            "location": "/interacting/overview/",
            "text": "Interacting with Monero\n\u00b6\n\n\nYou can interact with Monero via desktop GUI, commandline interface, and programming API.\n\n\nOn top of that, Monero nodes interact with each other in a peer-to-peer network. \n\n\nInstallation directory overview\n\u00b6\n\n\nThis considers the released version of Monero software. Once unpacked, you will notice six executable files:\n\n\n\n\nSeparation of node and wallet\n\u00b6\n\n\nMonero project nicely decouples node logic \nmonerod\n from wallet logic \nmonero-wallet-*\n.\nWallet logic is offered through three independent user interfaces - the GUI, the CLI, and the HTTP API.\n\n\n\n\n\n\n\n\nExecutable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmonerod\n\n\nThe full node daemon. Does not require a wallet.\n\n\n\n\n\n\nmonero-wallet-gui\n\n\nWallet logic and \ngraphical\n user interface. Requires \nmonerod\n running.\n\n\n\n\n\n\nmonero-wallet-cli\n\n\nWallet logic and \ncommandline\n user interface. Requires \nmonerod\n running.\n\n\n\n\n\n\nmonero-wallet-rpc\n\n\nWallet logic and \nHTTP API\n (JSON-RPC protocol). Requires \nmonerod\n running.\n\n\n\n\n\n\nmonero-blockchain-export\n\n\nTool to export blockchain to \nblockchain.raw\n file.\n\n\n\n\n\n\nmonero-blockchain-import\n\n\nTool to import \nblockchain.raw\n - ideally your own trusted copy.\n\n\n\n\n\n\n\n\nInteracting\n\u00b6\n\n\nThere are quite a few ways you can interact with Monero software.\nPerhaps the most surprising for newcomers is that \nmonerod\n daemon accepts interactive keyboard commands while it is running.\n\n\nAlso, please note that HTTP API is split across \nmonerod\n and \nmonero-wallet-rpc\n. You need to run and call both daemons to explore the full API.\nThis follows the node-logic vs wallet-logic split mentioned earlier.   \n\n\nAll wallet implementations depend on the \nmonerod\n running.\n\n\n\n\n\n\n\n\nExecutable\n\n\np2p network\n\n\nnode commands via keyboard\n\n\nnode HTTP API\n\n\nwallet commands via keyboard\n\n\nwallet HTTP API\n\n\nwallet via GUI\n\n\n\n\n\n\n\n\n\n\nmonerod\n\n\n\u2714\n\n\n\u2714\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\n\n\nmonero-wallet-cli\n\n\n\n\n\n\n\n\n\u2714\n\n\n\n\n\n\n\n\n\n\nmonero-wallet-rpc\n\n\n\n\n\n\n\n\n\n\n\u2714\n\n\n\n\n\n\n\n\nmonero-wallet-gui\n\n\n\n\n\n\n\n\n\n\n\n\n\u2714",
            "title": "Interacting"
        },
        {
            "location": "/interacting/overview/#interacting-with-monero",
            "text": "You can interact with Monero via desktop GUI, commandline interface, and programming API.  On top of that, Monero nodes interact with each other in a peer-to-peer network.",
            "title": "Interacting with Monero"
        },
        {
            "location": "/interacting/overview/#installation-directory-overview",
            "text": "This considers the released version of Monero software. Once unpacked, you will notice six executable files:",
            "title": "Installation directory overview"
        },
        {
            "location": "/interacting/overview/#separation-of-node-and-wallet",
            "text": "Monero project nicely decouples node logic  monerod  from wallet logic  monero-wallet-* .\nWallet logic is offered through three independent user interfaces - the GUI, the CLI, and the HTTP API.     Executable  Description      monerod  The full node daemon. Does not require a wallet.    monero-wallet-gui  Wallet logic and  graphical  user interface. Requires  monerod  running.    monero-wallet-cli  Wallet logic and  commandline  user interface. Requires  monerod  running.    monero-wallet-rpc  Wallet logic and  HTTP API  (JSON-RPC protocol). Requires  monerod  running.    monero-blockchain-export  Tool to export blockchain to  blockchain.raw  file.    monero-blockchain-import  Tool to import  blockchain.raw  - ideally your own trusted copy.",
            "title": "Separation of node and wallet"
        },
        {
            "location": "/interacting/overview/#interacting",
            "text": "There are quite a few ways you can interact with Monero software.\nPerhaps the most surprising for newcomers is that  monerod  daemon accepts interactive keyboard commands while it is running.  Also, please note that HTTP API is split across  monerod  and  monero-wallet-rpc . You need to run and call both daemons to explore the full API.\nThis follows the node-logic vs wallet-logic split mentioned earlier.     All wallet implementations depend on the  monerod  running.     Executable  p2p network  node commands via keyboard  node HTTP API  wallet commands via keyboard  wallet HTTP API  wallet via GUI      monerod  \u2714  \u2714  \u2714       monero-wallet-cli     \u2714      monero-wallet-rpc      \u2714     monero-wallet-gui       \u2714",
            "title": "Interacting"
        },
        {
            "location": "/technical-specs/",
            "text": "Monero Technical Specs\n\u00b6\n\n\nLive\n\u00b6\n\n\n\n\nMonero blockchain is live since 18 April 2014\n\n\n\n\nNo premine, no instamine, no ICO, no token\n\u00b6\n\n\n\n\nMonero had no premine or instamine\n\n\nMonero did not sell any token\n\n\nMonero had no presale of any kind\n\n\n\n\nProof of Work\n\u00b6\n\n\n\n\nCryptoNight\n\n\nmay change in the future\n\n\n\n\nDifficulty retarget\n\u00b6\n\n\n\n\nevery block\n\n\nbased on the last 720 blocks, excluding 20% of the timestamp outliers\n\n\n\n\nBlock time\n\u00b6\n\n\n\n\n2 minutes\n\n\nmay change in the future as long as emission curve is preserved\n\n\n\n\nBlock reward\n\u00b6\n\n\n\n\nsmoothly decreasing and subject to penalties for blocks greater then median size of the last 100 blocks (M100)\n\n\n~6 XMR as of Dec 2017; for the current reward check the coinbase transaction of the \nlatest block\n\n\n\n\nBlock size\n\u00b6\n\n\n\n\ndynamic\n\n\nmaximum of two times the median size of the last 100 blocks (2 * M100)\n\n\n~150KB as of Dec 2017; check \nthe latest block size\n\n\n\n\nEmission curve\n\u00b6\n\n\nMain emission\n\u00b6\n\n\n\n\nfirst, the main emission is about to produce ~18.132 million coins by the end of May 2022\n\n\nas of Dec 2017 the emission is about 30 XMR per 10 minutes\n\n\nsee \ncharts and details\n\n\n\n\nTail emission\n\u00b6\n\n\n\n\nthe tail emission kicks in once main emission is done\n\n\nit will produce 0.6 XMR per 2-minute block\n\n\nthis translates to <1% inflation decreasing over time\n\n\n\n\nMax supply\n\u00b6\n\n\n\n\n~18.132 million XMR + 0.6 XMR per 2 minutes\n\n\ntechnically infinite\n\n\npractically might be deflationary if accounted for lost coins\n\n\n\n\nSender privacy\n\u00b6\n\n\n\n\nring signatures\n\n\n\n\nRecipient privacy\n\u00b6\n\n\n\n\nstealth addresses\n\n\n\n\nAmount privacy\n\u00b6\n\n\n\n\nring confidential transactions\n\n\n\n\nIP address privacy\n\u00b6\n\n\n\n\nnot built in - please use TOR or I2P\n\n\nthere is an ongoing effort to integrate I2P into Monero - the Kovri project",
            "title": "Technical specs"
        },
        {
            "location": "/technical-specs/#monero-technical-specs",
            "text": "",
            "title": "Monero Technical Specs"
        },
        {
            "location": "/technical-specs/#live",
            "text": "Monero blockchain is live since 18 April 2014",
            "title": "Live"
        },
        {
            "location": "/technical-specs/#no-premine-no-instamine-no-ico-no-token",
            "text": "Monero had no premine or instamine  Monero did not sell any token  Monero had no presale of any kind",
            "title": "No premine, no instamine, no ICO, no token"
        },
        {
            "location": "/technical-specs/#proof-of-work",
            "text": "CryptoNight  may change in the future",
            "title": "Proof of Work"
        },
        {
            "location": "/technical-specs/#difficulty-retarget",
            "text": "every block  based on the last 720 blocks, excluding 20% of the timestamp outliers",
            "title": "Difficulty retarget"
        },
        {
            "location": "/technical-specs/#block-time",
            "text": "2 minutes  may change in the future as long as emission curve is preserved",
            "title": "Block time"
        },
        {
            "location": "/technical-specs/#block-reward",
            "text": "smoothly decreasing and subject to penalties for blocks greater then median size of the last 100 blocks (M100)  ~6 XMR as of Dec 2017; for the current reward check the coinbase transaction of the  latest block",
            "title": "Block reward"
        },
        {
            "location": "/technical-specs/#block-size",
            "text": "dynamic  maximum of two times the median size of the last 100 blocks (2 * M100)  ~150KB as of Dec 2017; check  the latest block size",
            "title": "Block size"
        },
        {
            "location": "/technical-specs/#emission-curve",
            "text": "",
            "title": "Emission curve"
        },
        {
            "location": "/technical-specs/#main-emission",
            "text": "first, the main emission is about to produce ~18.132 million coins by the end of May 2022  as of Dec 2017 the emission is about 30 XMR per 10 minutes  see  charts and details",
            "title": "Main emission"
        },
        {
            "location": "/technical-specs/#tail-emission",
            "text": "the tail emission kicks in once main emission is done  it will produce 0.6 XMR per 2-minute block  this translates to <1% inflation decreasing over time",
            "title": "Tail emission"
        },
        {
            "location": "/technical-specs/#max-supply",
            "text": "~18.132 million XMR + 0.6 XMR per 2 minutes  technically infinite  practically might be deflationary if accounted for lost coins",
            "title": "Max supply"
        },
        {
            "location": "/technical-specs/#sender-privacy",
            "text": "ring signatures",
            "title": "Sender privacy"
        },
        {
            "location": "/technical-specs/#recipient-privacy",
            "text": "stealth addresses",
            "title": "Recipient privacy"
        },
        {
            "location": "/technical-specs/#amount-privacy",
            "text": "ring confidential transactions",
            "title": "Amount privacy"
        },
        {
            "location": "/technical-specs/#ip-address-privacy",
            "text": "not built in - please use TOR or I2P  there is an ongoing effort to integrate I2P into Monero - the Kovri project",
            "title": "IP address privacy"
        },
        {
            "location": "/cryptography/introduction/",
            "text": "Cryptography in Monero\n\u00b6\n\n\nMonero uses a wide variety of cryptographic primitives for various use cases.\n\n\nComparing to altcoins, Monero cryptography is considered conservative, sound and robust.\n\n\nComparing to Bitcoin, Monero uses much more primitives, and some of them are more advanced, especially those related to privacy and Proof of Work.\nSome choices are deliberately non-standard (for better or worse) - oftentimes a legacy of the CryptoNote protocol.",
            "title": "Introduction"
        },
        {
            "location": "/cryptography/introduction/#cryptography-in-monero",
            "text": "Monero uses a wide variety of cryptographic primitives for various use cases.  Comparing to altcoins, Monero cryptography is considered conservative, sound and robust.  Comparing to Bitcoin, Monero uses much more primitives, and some of them are more advanced, especially those related to privacy and Proof of Work.\nSome choices are deliberately non-standard (for better or worse) - oftentimes a legacy of the CryptoNote protocol.",
            "title": "Cryptography in Monero"
        },
        {
            "location": "/cryptography/prng/",
            "text": "Monero Pseudorandom Number Generator\n\u00b6\n\n\nMonero uses PRNG based on the Keccak hashing function.\nBasically, output of the previous hashing round is input for the next one.\n\n\nThe initial seed comes from entropy sources provided by operating system.\nOn Linux and MacOS the seed comes from \n/dev/urandom\n.\nOn Windows the WinAPI \nCryptGenRandom\n call is used for seeding.\n\n\nThere is no reseeding.\n\n\nCaveats\n\u00b6\n\n\n\n\nThis concerns the reference C++ implementation of Monero.\nPlease note there are many alternative implementations of private key generation,\nincluding JavaScript, Python, Android/Java. These should be researched case by case for correctness.    \n\n\nIn Monero source code you can also find libsodium based random bytes generator. It is part of the embedded library and apparently is not used in actual Monero code.  \n\n\n\n\nReference\n\u00b6\n\n\n\n\nSource code\n\n\nStackExchange answer",
            "title": "PRNG"
        },
        {
            "location": "/cryptography/prng/#monero-pseudorandom-number-generator",
            "text": "Monero uses PRNG based on the Keccak hashing function.\nBasically, output of the previous hashing round is input for the next one.  The initial seed comes from entropy sources provided by operating system.\nOn Linux and MacOS the seed comes from  /dev/urandom .\nOn Windows the WinAPI  CryptGenRandom  call is used for seeding.  There is no reseeding.",
            "title": "Monero Pseudorandom Number Generator"
        },
        {
            "location": "/cryptography/prng/#caveats",
            "text": "This concerns the reference C++ implementation of Monero.\nPlease note there are many alternative implementations of private key generation,\nincluding JavaScript, Python, Android/Java. These should be researched case by case for correctness.      In Monero source code you can also find libsodium based random bytes generator. It is part of the embedded library and apparently is not used in actual Monero code.",
            "title": "Caveats"
        },
        {
            "location": "/cryptography/prng/#reference",
            "text": "Source code  StackExchange answer",
            "title": "Reference"
        },
        {
            "location": "/cryptography/keccak-256/",
            "text": "Keccak-256 hash function\n\u00b6\n\n\nMonero employs Keccak as a hashing function. In most context specifically Keccak-256 is used,\nproviding 32-byte hashes.\n\n\nKeccak is the leading hashing function, designed by non-NSA designers.\nKeccak won \nNIST competition\n to become the official SHA3.\n\n\nUse Cases\n\u00b6\n\n\nMonero does \nnot\n employ Keccak for Proof-of-Work. Instead, Keccak is used for:\n\n\n\n\nrandom number generator\n\n\nblock hashing\n\n\ntransaction hashing\n\n\nstealth address private key image (for double spend protection)\n\n\npublic address checksum\n\n\nRingCT\n\n\nmultisig\n\n\nbulletproofs\n\n\n\n\n...and likely a few other things.\n\n\nKeccak-256 vs SHA3-256\n\u00b6\n\n\nSHA3-256 is Keccak-256, except NIST changed padding.\nFor that reason original Keccak-256 gives in a different hash value than NIST SHA3-256.  \n\n\nMonero uses original Keccak-256.\nThe NIST standard was only published on August 2015, while Monero went live on 18 April 2014.  \n\n\nReference\n\u00b6\n\n\n\n\nKeccak source code used in Monero\n\n\nSHA3 on Wikipedia\n\n\nKeccak-256 vs SHA3-256\n explained on Ethereum stackexchange\n\n\nOnline tool to calculate Keccak-256 and SHA3-256",
            "title": "Keccak-256"
        },
        {
            "location": "/cryptography/keccak-256/#keccak-256-hash-function",
            "text": "Monero employs Keccak as a hashing function. In most context specifically Keccak-256 is used,\nproviding 32-byte hashes.  Keccak is the leading hashing function, designed by non-NSA designers.\nKeccak won  NIST competition  to become the official SHA3.",
            "title": "Keccak-256 hash function"
        },
        {
            "location": "/cryptography/keccak-256/#use-cases",
            "text": "Monero does  not  employ Keccak for Proof-of-Work. Instead, Keccak is used for:   random number generator  block hashing  transaction hashing  stealth address private key image (for double spend protection)  public address checksum  RingCT  multisig  bulletproofs   ...and likely a few other things.",
            "title": "Use Cases"
        },
        {
            "location": "/cryptography/keccak-256/#keccak-256-vs-sha3-256",
            "text": "SHA3-256 is Keccak-256, except NIST changed padding.\nFor that reason original Keccak-256 gives in a different hash value than NIST SHA3-256.    Monero uses original Keccak-256.\nThe NIST standard was only published on August 2015, while Monero went live on 18 April 2014.",
            "title": "Keccak-256 vs SHA3-256"
        },
        {
            "location": "/cryptography/keccak-256/#reference",
            "text": "Keccak source code used in Monero  SHA3 on Wikipedia  Keccak-256 vs SHA3-256  explained on Ethereum stackexchange  Online tool to calculate Keccak-256 and SHA3-256",
            "title": "Reference"
        },
        {
            "location": "/cryptography/asymmetric/introduction/",
            "text": "Asymmetric cryptography in Monero\n\u00b6\n\n\n\n\nDanger\n\n\nAuthor is nowhere close to being a cryptographer. Be sceptical on accuracy.\n\n\n\n\nBefore we get to Monero specific stuff, a little bit of context. We are talking asymmetric cryptography here.\nThe \"asymmetric\" simply means the are two keys:\n\n\n\n\nthe private key (used primarily for signing data and for decrypting data)\n\n\nthe public key (used primarily for signature verification and encrypting data)\n\n\n\n\nThis is in contrast to symmetric cryptography which uses a single (secret) key.\n\n\nHistorically, asymmetric cryptography was based on the problem of factorization of a very large integers\nback into prime numbers (which is practically impossible for large enough integers).\n\n\nRecently, asymmetric cryptography is based on a mathematical notion of elliptic curves.\nEd25519 is a specific, well researched and standardized elliptic curve used in Monero.",
            "title": "Introduction"
        },
        {
            "location": "/cryptography/asymmetric/introduction/#asymmetric-cryptography-in-monero",
            "text": "Danger  Author is nowhere close to being a cryptographer. Be sceptical on accuracy.   Before we get to Monero specific stuff, a little bit of context. We are talking asymmetric cryptography here.\nThe \"asymmetric\" simply means the are two keys:   the private key (used primarily for signing data and for decrypting data)  the public key (used primarily for signature verification and encrypting data)   This is in contrast to symmetric cryptography which uses a single (secret) key.  Historically, asymmetric cryptography was based on the problem of factorization of a very large integers\nback into prime numbers (which is practically impossible for large enough integers).  Recently, asymmetric cryptography is based on a mathematical notion of elliptic curves.\nEd25519 is a specific, well researched and standardized elliptic curve used in Monero.",
            "title": "Asymmetric cryptography in Monero"
        },
        {
            "location": "/cryptography/asymmetric/private-key/",
            "text": "Private keys in Monero\n\u00b6\n\n\n\n\nDanger\n\n\nAuthor is nowhere close to being a cryptographer. Be sceptical on accuracy.\n\n\n\n\nIn Monero, the root private key is generated \nrandomly\n. Other private keys are derived deterministically from the root private key.\n\n\nPrivate key must be kept secret.\n\n\nPrivate key is a \nlarge integer\n impossible to guess, like:\n\n108555083659983933209597798445644913612440610624038028786991485007418559037440\n\n\nPrivate key is 256 bits long. \n\n\nPrivate key is a \nscalar\n, meaning it is a single value.\n\n\nIn equations scalars are represented by \nlowercase letters\n. \n\n\nRelation to Ed25519\n\u00b6\n\n\nBeing simply a random integer, private key is not specific to any particular asymmetric cryptography scheme.\n\n\nIn context of Monero EC cryptography the private key is a number the base point \nG\n is multiplied by.\nThe result of the multiplication is the public key \nP\n (another point on the curve).\nMultiplication of a point by a number has a very special definition in EC cryptography.\nSee this \nthis guide\n for details.\n\n\nKey strength\n\u00b6\n\n\nBefore deriving Ed25519 public key, the private key is subject to modulo \nl\n,\nwhere \nl\n is the maximum scalar allowed by the \nEd25519 scheme\n.\n\n\nThe \nl\n is on the order of 2^252, so the effective key strength is technically 252 bits, not 256 bits.\nThis is standard for EC cryptography and is more of a cosmetic nuance than any concern.\n\n\nEncoding\n\u00b6\n\n\nIn user-facing contexts, the private key integer is:\n\n\n\n\nTaken modulo \nl\n to avoid malleability\n\n\nPut as array of 32 bytes in a \nlittle-endian\n direction (the first byte is the least significant)\n\n\nConverted to hexadecimal form, like: \nb3588a87056fb21dc4d052d59e83b54293882e646b543c29478e4cf45c28a402\n\n\n\n\nPrivate spend key\n\u00b6\n\n\nPrivate spend key is used to spend moneros.\n\n\nMore specifically, it is used to build one-time private keys which allow to spend related outputs.\n\n\nPrivate view key\n\u00b6\n\n\nPrivate view key is used to recognize your incoming transactions on the otherwise opaque blockchain.\n\n\nOne-time private keys\n\u00b6\n\n\nOne-time private key like construct is used in \nstealth addresses\n.",
            "title": "Private keys"
        },
        {
            "location": "/cryptography/asymmetric/private-key/#private-keys-in-monero",
            "text": "Danger  Author is nowhere close to being a cryptographer. Be sceptical on accuracy.   In Monero, the root private key is generated  randomly . Other private keys are derived deterministically from the root private key.  Private key must be kept secret.  Private key is a  large integer  impossible to guess, like: 108555083659983933209597798445644913612440610624038028786991485007418559037440  Private key is 256 bits long.   Private key is a  scalar , meaning it is a single value.  In equations scalars are represented by  lowercase letters .",
            "title": "Private keys in Monero"
        },
        {
            "location": "/cryptography/asymmetric/private-key/#relation-to-ed25519",
            "text": "Being simply a random integer, private key is not specific to any particular asymmetric cryptography scheme.  In context of Monero EC cryptography the private key is a number the base point  G  is multiplied by.\nThe result of the multiplication is the public key  P  (another point on the curve).\nMultiplication of a point by a number has a very special definition in EC cryptography.\nSee this  this guide  for details.",
            "title": "Relation to Ed25519"
        },
        {
            "location": "/cryptography/asymmetric/private-key/#key-strength",
            "text": "Before deriving Ed25519 public key, the private key is subject to modulo  l ,\nwhere  l  is the maximum scalar allowed by the  Ed25519 scheme .  The  l  is on the order of 2^252, so the effective key strength is technically 252 bits, not 256 bits.\nThis is standard for EC cryptography and is more of a cosmetic nuance than any concern.",
            "title": "Key strength"
        },
        {
            "location": "/cryptography/asymmetric/private-key/#encoding",
            "text": "In user-facing contexts, the private key integer is:   Taken modulo  l  to avoid malleability  Put as array of 32 bytes in a  little-endian  direction (the first byte is the least significant)  Converted to hexadecimal form, like:  b3588a87056fb21dc4d052d59e83b54293882e646b543c29478e4cf45c28a402",
            "title": "Encoding"
        },
        {
            "location": "/cryptography/asymmetric/private-key/#private-spend-key",
            "text": "Private spend key is used to spend moneros.  More specifically, it is used to build one-time private keys which allow to spend related outputs.",
            "title": "Private spend key"
        },
        {
            "location": "/cryptography/asymmetric/private-key/#private-view-key",
            "text": "Private view key is used to recognize your incoming transactions on the otherwise opaque blockchain.",
            "title": "Private view key"
        },
        {
            "location": "/cryptography/asymmetric/private-key/#one-time-private-keys",
            "text": "One-time private key like construct is used in  stealth addresses .",
            "title": "One-time private keys"
        },
        {
            "location": "/cryptography/asymmetric/public-key/",
            "text": "Public keys in Monero\n\u00b6\n\n\n\n\nDanger\n\n\nAuthor is nowhere close to being a cryptographer. Be sceptical on accuracy.\n\n\n\n\n\n\nWarning\n\n\nArticle is a work in progress.\n\n\n\n\nPublic key is deterministically derived from private key based on \nEd25519 curve\n with a little Monero-specific twist.\n\n\nPublic key is meant to be shared. Assuming correct implementation, it is not practically possible to recover private key from public key. \n\n\nPublic key is a \npoint (x,y)\n on the elliptic curve.\n\n\nIn equations points are represented by \nuppercase letters\n.\n\n\nIn user-facing contexts, public key is encoded in a \nlittle-endian\n hexadecimal form, like:\n\n016a941812293cf9a86071060fb090ab38d67945e659968cb8cf30e1bc725683\n \n\n\nDeriving public key\n\u00b6\n\n\nSay:\n\n\n\n\nP is a public key\n\n\nx is a private key\n\n\nG is a \"base point\"; this is simply a constant specific to \nEd25519\n; this point lies on the elliptic curve\n\n\n\n\nThen:\n\n\nP = xG\n\n\n\n\n\nThe public key is simply the base point (G) multiplied by the private key (x).\nMultiplying the point is adding the point to itself a number of times.\n\n\nHowever, the addition is \nnot\n a simple vector addition. It has a very specific\ndefinition nicely described in \nthis article\n.\nWhat is important is that result of addition is always a point on the curve.\nFor example, G + G is another point on the curve.\n\n\nUse cases\n\u00b6\n\n\nMonero address\n is composed of public spend key and public view key.\nThese keys are used to build stealth addresses to receive payments.",
            "title": "Public keys"
        },
        {
            "location": "/cryptography/asymmetric/public-key/#public-keys-in-monero",
            "text": "Danger  Author is nowhere close to being a cryptographer. Be sceptical on accuracy.    Warning  Article is a work in progress.   Public key is deterministically derived from private key based on  Ed25519 curve  with a little Monero-specific twist.  Public key is meant to be shared. Assuming correct implementation, it is not practically possible to recover private key from public key.   Public key is a  point (x,y)  on the elliptic curve.  In equations points are represented by  uppercase letters .  In user-facing contexts, public key is encoded in a  little-endian  hexadecimal form, like: 016a941812293cf9a86071060fb090ab38d67945e659968cb8cf30e1bc725683",
            "title": "Public keys in Monero"
        },
        {
            "location": "/cryptography/asymmetric/public-key/#deriving-public-key",
            "text": "Say:   P is a public key  x is a private key  G is a \"base point\"; this is simply a constant specific to  Ed25519 ; this point lies on the elliptic curve   Then:  P = xG  The public key is simply the base point (G) multiplied by the private key (x).\nMultiplying the point is adding the point to itself a number of times.  However, the addition is  not  a simple vector addition. It has a very specific\ndefinition nicely described in  this article .\nWhat is important is that result of addition is always a point on the curve.\nFor example, G + G is another point on the curve.",
            "title": "Deriving public key"
        },
        {
            "location": "/cryptography/asymmetric/public-key/#use-cases",
            "text": "Monero address  is composed of public spend key and public view key.\nThese keys are used to build stealth addresses to receive payments.",
            "title": "Use cases"
        },
        {
            "location": "/cryptography/asymmetric/ed25519/",
            "text": "Ed25519 curve\n\u00b6\n\n\n\n\nDanger\n\n\nAuthor is nowhere close to being a cryptographer. Be sceptical on accuracy.\n\n\n\n\n\n\nNote\n\n\nThis article is only about the underlying curve. Public key derivation and signing algorithm will be treated separately. \n\n\n\n\nMonero employs Ed25519 elliptic curve as a basis for its key pair generation.\n\n\nHowever, Monero does not exactly follow EdDSA reference signature scheme.\n\n\nDefinition\n\u00b6\n\n\nThis is the standard Ed25519 curve definition, no Monero specific stuff here.\n\n\nCurve equation:\n\n\n\u2212x^2 + y^2 = 1 \u2212 (121665/121666) * x^2 * y^2\n\n\n\n\n\nBase point:\n\n\n# The base point is the specific point on the curve. It is used\n# as a basis for further calculations. It is an arbitrary choice\n# by the curve authors, just to standarize the scheme.\n# \n# Note that it is enough to specify the y value and the sign of the x value.\n# That's because the specific x can be calculated from the curve equation.    \nG = (x, 4/5)  # take the point with the positive x\n\n# The hex representation of the base point\n5866666666666666666666666666666666666666666666666666666666666666\n\n\n\n\n\nPrime order of the base point:\n\n\n# In layment terms, the \"canvas\" where the curve is drawn is assumed\n# to have a finite \"resolution\", so point coordinates must \"wrap around\"\n# at some point. This is achieved by modulo the \"l\" value.\n# In other words, the \"l\" defines the maximum scalar we can use.\nl = 2^252 + 27742317777372353535851937790883648493\n\n\n\n\n\nThe total number of points on the curve, a prime number:\n\n\nq = 2^255 - 19\n\n\n\n\n\nImplementation\n\u00b6\n\n\nMonero uses (apparently modified) Ref10 implementation by Daniel J. Bernstein.\n\n\nReference\n\u00b6\n\n\n\n\nUnderstanding Monero Cryptography\n - excellent writeup by Luigi\n\n\nStackOverflow answer\n\n\nPython implementation\n - not the reference one but easier to understand\n\n\nEncoding point to hex\n\n\nEd25519 on Wikipedia\n\n\nA (Relatively Easy To Understand) Primer on Elliptic Curve Cryptography",
            "title": "Ed25519 curve"
        },
        {
            "location": "/cryptography/asymmetric/ed25519/#ed25519-curve",
            "text": "Danger  Author is nowhere close to being a cryptographer. Be sceptical on accuracy.    Note  This article is only about the underlying curve. Public key derivation and signing algorithm will be treated separately.    Monero employs Ed25519 elliptic curve as a basis for its key pair generation.  However, Monero does not exactly follow EdDSA reference signature scheme.",
            "title": "Ed25519 curve"
        },
        {
            "location": "/cryptography/asymmetric/ed25519/#definition",
            "text": "This is the standard Ed25519 curve definition, no Monero specific stuff here.  Curve equation:  \u2212x^2 + y^2 = 1 \u2212 (121665/121666) * x^2 * y^2  Base point:  # The base point is the specific point on the curve. It is used\n# as a basis for further calculations. It is an arbitrary choice\n# by the curve authors, just to standarize the scheme.\n# \n# Note that it is enough to specify the y value and the sign of the x value.\n# That's because the specific x can be calculated from the curve equation.    \nG = (x, 4/5)  # take the point with the positive x\n\n# The hex representation of the base point\n5866666666666666666666666666666666666666666666666666666666666666  Prime order of the base point:  # In layment terms, the \"canvas\" where the curve is drawn is assumed\n# to have a finite \"resolution\", so point coordinates must \"wrap around\"\n# at some point. This is achieved by modulo the \"l\" value.\n# In other words, the \"l\" defines the maximum scalar we can use.\nl = 2^252 + 27742317777372353535851937790883648493  The total number of points on the curve, a prime number:  q = 2^255 - 19",
            "title": "Definition"
        },
        {
            "location": "/cryptography/asymmetric/ed25519/#implementation",
            "text": "Monero uses (apparently modified) Ref10 implementation by Daniel J. Bernstein.",
            "title": "Implementation"
        },
        {
            "location": "/cryptography/asymmetric/ed25519/#reference",
            "text": "Understanding Monero Cryptography  - excellent writeup by Luigi  StackOverflow answer  Python implementation  - not the reference one but easier to understand  Encoding point to hex  Ed25519 on Wikipedia  A (Relatively Easy To Understand) Primer on Elliptic Curve Cryptography",
            "title": "Reference"
        },
        {
            "location": "/cryptography/asymmetric/key-image/",
            "text": "Monero private key image\n\u00b6\n\n\n\n\nDanger\n\n\nAuthor is nowhere close to being a cryptographer. Be sceptical on accuracy.\n\n\n\n\nPrivate key image serves to detect double spending attempts.\n\n\nIn Monero funds are always sent to a one-time public key \nP\n.\nRelated one-time private key \nx\n is specific to unspent output.\n\n\nAs output can be spent only once (in whole), the related private key can be used only once as well.\n\n\nThus, specific private key image \nI\n being present on the blockchain means\nthat related output was already spent, and subsequent attempts must not be allowed.\n\n\nThis whole scheme is necessary because Monero uses Ring Signatures\nwhich make it impossible to know whom exactly signed the transaction.\nThis is why a simple Bitcoin-like double spending check wouldn't work here. \n\n\nDefinition\n\u00b6\n\n\nI = x*Hp(P)\n\n\n\n\n\nWhere:\n\n\n\n\nI\n - private key image (or \"key image\" for short)\n\n\nx\n - one-time private key used to unlock an unspent output\n\n\nP\n - one-time public key of an unspent output\n\n\nHp()\n - hash function accepting an EC point as an argument \n\n\n\n\nThe \nP\n comes from this:\n\n\nP = xG\n\n\n\n\n\nWhere \nG\n is the \nEd25519\n base point. \n\n\nSubstitute \nP\n with \nxG\n and we get:\n\n\nI = x*Hp(xG)\n\n\n\n\n\nThe key image \nI\n is a one-way function of the private key \nx\n.\n\n\nReference\n\u00b6\n\n\n\n\nStackExchange answer\n\n\nAnother SE answer",
            "title": "Key image"
        },
        {
            "location": "/cryptography/asymmetric/key-image/#monero-private-key-image",
            "text": "Danger  Author is nowhere close to being a cryptographer. Be sceptical on accuracy.   Private key image serves to detect double spending attempts.  In Monero funds are always sent to a one-time public key  P .\nRelated one-time private key  x  is specific to unspent output.  As output can be spent only once (in whole), the related private key can be used only once as well.  Thus, specific private key image  I  being present on the blockchain means\nthat related output was already spent, and subsequent attempts must not be allowed.  This whole scheme is necessary because Monero uses Ring Signatures\nwhich make it impossible to know whom exactly signed the transaction.\nThis is why a simple Bitcoin-like double spending check wouldn't work here.",
            "title": "Monero private key image"
        },
        {
            "location": "/cryptography/asymmetric/key-image/#definition",
            "text": "I = x*Hp(P)  Where:   I  - private key image (or \"key image\" for short)  x  - one-time private key used to unlock an unspent output  P  - one-time public key of an unspent output  Hp()  - hash function accepting an EC point as an argument    The  P  comes from this:  P = xG  Where  G  is the  Ed25519  base point.   Substitute  P  with  xG  and we get:  I = x*Hp(xG)  The key image  I  is a one-way function of the private key  x .",
            "title": "Definition"
        },
        {
            "location": "/cryptography/asymmetric/key-image/#reference",
            "text": "StackExchange answer  Another SE answer",
            "title": "Reference"
        },
        {
            "location": "/cryptography/base58/",
            "text": "Base58\n\u00b6\n\n\nBase58 is a binary-to-text encoding scheme. It is similar to Base64 but has been modified to avoid both non-alphanumeric characters and letters which might look ambiguous when printed. The characters excluded in relation to Base64 are: \nIOl0+/\n\n\nBase58 does not strictly specify the format. This results in some implementations being incompatible with others, for example with regard to alphabet order.\n\n\nFor details, see \nWikipedia\n.\n\n\nBase58 in Monero\n\u00b6\n\n\nMonero has its own variant of Base58.\n\n\nIn Monero the Base58 encoding is performed in 8-byte blocks, except the last block which is the remaining (8 or less) bytes .\n\n\nThe 8-byte block converts to 11 or less Base58 characters. If the block converted to less then 11 characters, the output is padded with \"1\"s (0 in Base58). The final block is padded as well to whatever would be the maximum size of this number of bytes encoded in Base58.\n\n\nThe advantage of Monero implementation is that output is of a fixed size which is not the case with plain Base58. The disadvantage is that default libraries won't work.\n\n\nFor details, see \nreference C++ Base58\n implementation and \nunofficial Python Base58\n implementation.",
            "title": "Base58"
        },
        {
            "location": "/cryptography/base58/#base58",
            "text": "Base58 is a binary-to-text encoding scheme. It is similar to Base64 but has been modified to avoid both non-alphanumeric characters and letters which might look ambiguous when printed. The characters excluded in relation to Base64 are:  IOl0+/  Base58 does not strictly specify the format. This results in some implementations being incompatible with others, for example with regard to alphabet order.  For details, see  Wikipedia .",
            "title": "Base58"
        },
        {
            "location": "/cryptography/base58/#base58-in-monero",
            "text": "Monero has its own variant of Base58.  In Monero the Base58 encoding is performed in 8-byte blocks, except the last block which is the remaining (8 or less) bytes .  The 8-byte block converts to 11 or less Base58 characters. If the block converted to less then 11 characters, the output is padded with \"1\"s (0 in Base58). The final block is padded as well to whatever would be the maximum size of this number of bytes encoded in Base58.  The advantage of Monero implementation is that output is of a fixed size which is not the case with plain Base58. The disadvantage is that default libraries won't work.  For details, see  reference C++ Base58  implementation and  unofficial Python Base58  implementation.",
            "title": "Base58 in Monero"
        },
        {
            "location": "/public-address/standard-address/",
            "text": "Address\n\u00b6\n\n\nMonero public address is what you publish to get paid.\n\n\nAn address can be generated offline and for free. It boils down to generating a large random number representing your private spending key.\n\n\nPublishing your Monero address does \nnot\n endanger your privacy. That's because in Monero transactions go to stealth addresses which are decoupled from your public address.\n\n\nThere are a few types of public addresses in Monero:\n\n\n\n\nStandard address - the basic type of the address, also refered to as raw address\n\n\nIntegrated address - embeds payment ID so you can learn for what you are being paid\n\n\nSubaddress - slightly enhances privacy and allows for organizing your funds in subaccounts within a single wallet\n\n\n\n\nStandard address\n\u00b6\n\n\nThe raw address is useful for things like donations (where you don't care who donated)\nor exchange withdrawals (where you know the payer out of band). Its strength is simplicity.\n\n\nMonero standard address is composed of two public keys:\n\n\n\n\npublic spend key\n\n\npublic view key\n\n\n\n\nIt also contains a checksum and a \"network byte\" which actually identifies both the network and the address type.\n\n\nData structure (\nsrc\n):\n\n\n\n\n\n\n\n\nIndex\n\n\nSize in bytes\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\n1\n\n\nidentifies the network and address type; \n18\n - main chain; \n53\n - test chain\n\n\n\n\n\n\n1\n\n\n32\n\n\npublic spend key\n\n\n\n\n\n\n33\n\n\n32\n\n\npublic view key\n\n\n\n\n\n\n65\n\n\n4\n\n\nchecksum (\nKeccak-f[1600] hash\n of the previous 65 bytes, trimmed to first \n4\n bytes)\n\n\n\n\n\n\n\n\nIt totals to 69 bytes. The bytes are then encoded (\nsrc\n) in \nMonero specific Base58\n format, resulting in a 95 chars long string. Example standard address:\n\n\n4AdUndXHHZ6cfufTMvppY6JwXNouMBzSkbLYfpAV5Usx3skxNgYeYTRj5UzqtReoS44qo9mtmXCqY45DJ852K5Jv2684Rge\n\n\nGenerating\n\u00b6\n\n\nStandard address is derived from the root private key. TODO: describe.\n\n\nReference\n\u00b6\n\n\n\n\nStackExchenge answer\n\n\nhttps://xmr.llcoins.net/addresstests.html",
            "title": "Standard"
        },
        {
            "location": "/public-address/standard-address/#address",
            "text": "Monero public address is what you publish to get paid.  An address can be generated offline and for free. It boils down to generating a large random number representing your private spending key.  Publishing your Monero address does  not  endanger your privacy. That's because in Monero transactions go to stealth addresses which are decoupled from your public address.  There are a few types of public addresses in Monero:   Standard address - the basic type of the address, also refered to as raw address  Integrated address - embeds payment ID so you can learn for what you are being paid  Subaddress - slightly enhances privacy and allows for organizing your funds in subaccounts within a single wallet",
            "title": "Address"
        },
        {
            "location": "/public-address/standard-address/#standard-address",
            "text": "The raw address is useful for things like donations (where you don't care who donated)\nor exchange withdrawals (where you know the payer out of band). Its strength is simplicity.  Monero standard address is composed of two public keys:   public spend key  public view key   It also contains a checksum and a \"network byte\" which actually identifies both the network and the address type.  Data structure ( src ):     Index  Size in bytes  Description      0  1  identifies the network and address type;  18  - main chain;  53  - test chain    1  32  public spend key    33  32  public view key    65  4  checksum ( Keccak-f[1600] hash  of the previous 65 bytes, trimmed to first  4  bytes)     It totals to 69 bytes. The bytes are then encoded ( src ) in  Monero specific Base58  format, resulting in a 95 chars long string. Example standard address:  4AdUndXHHZ6cfufTMvppY6JwXNouMBzSkbLYfpAV5Usx3skxNgYeYTRj5UzqtReoS44qo9mtmXCqY45DJ852K5Jv2684Rge",
            "title": "Standard address"
        },
        {
            "location": "/public-address/standard-address/#generating",
            "text": "Standard address is derived from the root private key. TODO: describe.",
            "title": "Generating"
        },
        {
            "location": "/public-address/standard-address/#reference",
            "text": "StackExchenge answer  https://xmr.llcoins.net/addresstests.html",
            "title": "Reference"
        },
        {
            "location": "/public-address/integrated-address/",
            "text": "Integrated address\n\u00b6\n\n\nMonero integrated address embeds a compact payment ID.\n\n\nUse integrated address to learn for what you are being paid. It is ideal for accepting Monero in an automated fashion,\nlike online stores and exchanges.    \n\n\nYou should allow Monero software to generate integrated addresses for you (instead of forcing your own payment IDs).\nPlease note these are Monero technical payment IDs and must not be confused with business identifiers like order number or invoice number.\n\n\nThe transaction to integrated address will not reveal the payment ID publicly.\nPayment ID in a transaction will be encrypted with a shared secret (one-time random key known only to sender and recipient).\nOnly the recipient will be able to match the transaction against payment ID.\nTODO: explain how exactly payment IDs are encoded in transactions.\n\n\nMonero integrated address obsoletes the former practice of using full 32-bytes payment ID in a transaction extra field (where it was not encrypted).\n\n\nData structure (\nsrc\n):\n\n\n\n\n\n\n\n\nIndex\n\n\nSize in bytes\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\n1\n\n\nidentifies the network and address type; \n19\n - main chain; \n54\n - test chain\n\n\n\n\n\n\n1\n\n\n32\n\n\npublic spend key\n\n\n\n\n\n\n33\n\n\n32\n\n\npublic view key\n\n\n\n\n\n\n65\n\n\n8\n\n\ncompact payment ID -  8 bytes randomly generated by the recipient; note that it does not need encryption in the address itself but it is hidden in a transaction paying to integrated address to prevent linking payment with the address by external observers\n\n\n\n\n\n\n73\n\n\n4\n\n\nchecksum (\nKeccak-f[1600] hash\n of the previous 73 bytes, trimmed to first \n4\n bytes)\n\n\n\n\n\n\n\n\nIt totals to 78 bytes. The bytes are then encoded (\nsrc\n) in \nMonero specific Base58\n format, resulting in a 106 chars long string. Example integrated address:\n\n\n4LL9oSLmtpccfufTMvppY6JwXNouMBzSkbLYfpAV5Usx3skxNgYeYTRj5UzqtReoS44qo9mtmXCqY45DJ852K5Jv2bYXZKKQePHES9khPK\n\n\nCaveats\n\u00b6\n\n\nSingle transaction cannot pay to multiple integrated addresses.\n\n\nReference\n\u00b6\n\n\n\n\nquestion on \nStackExchenge",
            "title": "Integrated"
        },
        {
            "location": "/public-address/integrated-address/#integrated-address",
            "text": "Monero integrated address embeds a compact payment ID.  Use integrated address to learn for what you are being paid. It is ideal for accepting Monero in an automated fashion,\nlike online stores and exchanges.      You should allow Monero software to generate integrated addresses for you (instead of forcing your own payment IDs).\nPlease note these are Monero technical payment IDs and must not be confused with business identifiers like order number or invoice number.  The transaction to integrated address will not reveal the payment ID publicly.\nPayment ID in a transaction will be encrypted with a shared secret (one-time random key known only to sender and recipient).\nOnly the recipient will be able to match the transaction against payment ID.\nTODO: explain how exactly payment IDs are encoded in transactions.  Monero integrated address obsoletes the former practice of using full 32-bytes payment ID in a transaction extra field (where it was not encrypted).  Data structure ( src ):     Index  Size in bytes  Description      0  1  identifies the network and address type;  19  - main chain;  54  - test chain    1  32  public spend key    33  32  public view key    65  8  compact payment ID -  8 bytes randomly generated by the recipient; note that it does not need encryption in the address itself but it is hidden in a transaction paying to integrated address to prevent linking payment with the address by external observers    73  4  checksum ( Keccak-f[1600] hash  of the previous 73 bytes, trimmed to first  4  bytes)     It totals to 78 bytes. The bytes are then encoded ( src ) in  Monero specific Base58  format, resulting in a 106 chars long string. Example integrated address:  4LL9oSLmtpccfufTMvppY6JwXNouMBzSkbLYfpAV5Usx3skxNgYeYTRj5UzqtReoS44qo9mtmXCqY45DJ852K5Jv2bYXZKKQePHES9khPK",
            "title": "Integrated address"
        },
        {
            "location": "/public-address/integrated-address/#caveats",
            "text": "Single transaction cannot pay to multiple integrated addresses.",
            "title": "Caveats"
        },
        {
            "location": "/public-address/integrated-address/#reference",
            "text": "question on  StackExchenge",
            "title": "Reference"
        },
        {
            "location": "/public-address/subaddress/",
            "text": "Subaddress\n\u00b6\n\n\n\n\nWarning\n\n\nThis is unreleased feature.\n\n\n\n\nSubaddresses serve two purposes described below.\n\n\nPrevent payer from linking your payouts together\n\u00b6\n\n\nTo prevent the payer from linking your payouts together simply generate a new subaddress for each payout.\nThis way services like \nShapeshift\n wouldn't know it is you again receving Monero.\n\n\nNote it won't help if you have an account with the service. Then your payouts are already linked in the service database, regardless of Monero.\n\n\nGroup incoming payments\n\u00b6\n\n\nThink income streams.\n\n\nSubaddresses allow to group incoming transactions within a single wallet.\n\n\nUser interface allows to assign convenience labels to subaddresses.\n\n\nYou may want to organize your incoming funds into a streams like \"donations\", \"work\", etc.\n\n\nThis is similar to subaccounts in your bank account. There is a very important difference though.\n\n\nIn Monero funds don't really sit on public addresses. Public addresses are conceptually a gateway or a routing mechanism. Funds sit on the unspent outputs. Thus, a single transaction can aggregate and spent outputs from multiple addresses.\n\n\nWhy not multiple wallets?\n\u00b6\n\n\nThe advantage over creating multiple wallets is that you only have a \nsingle seed\n to manage.\nAll subaddresses can be derived from the wallet seed.\n\n\nAdditionally, you conveniently manage your subaddresses within a single user interface.\n\n\nWallet level feature\n\u00b6\n\n\nSubaddresses are a wallet-level feature to construct and interpret transactions. They do not affect the consensus. \n\n\nData structure\n\u00b6\n\n\nSubaddress has a dedicated \"network byte\":\n\n\n\n\n\n\n\n\nIndex\n\n\nSize in bytes\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\n1\n\n\nidentifies the network and address type; \n42\n - main chain; \n63\n - test chain\n\n\n\n\n\n\n\n\nOtherwise the data structure is the same as for \nstandard address\n.\n\n\nEach subaddress conceptually has an index (with 0 being the base standard address).\nThe index is not directly included in subaddress structure but is used as input to create the private spend key.\n\n\nGenerating\n\u00b6\n\n\nThe private key \nm\n related to a subaddress is derived as follows:\n\n\nm = Hs(a || i)\n\n\n\n\n\nWhere:\n\n\n\n\nHs\n is a Keccak-256 hash function interpreted as integer and modulo \nl\n (maximum Ed25519 scalar)\n\n\na\n is a private view key\n\n\ni\n is a subaddress index\n\n\n\n\nTODO: describe rest of the procedure.\n\n\nCaveates\n\u00b6\n\n\n\n\nSubaddress \ncannot\n be used to receive transactions having multiple destinations (e.g. pool payouts). Only the standard address (the one with index == 0) can receive such transactions.\n\n\nIt is not recommended to sweep all the balances of subaddress to main address in a single transaction. That links the subaddresses together on the blockchain. However, this only concerns privacy against specific sender and the situation will never get worse than not using subaddresses in the first place. If you need to join funds while preserving maximum privacy do it with individual transactions (one per subaddress).\n\n\nConvenience labels are not preserved when recreating from seed.\n\n\n\n\nReference\n\u00b6\n\n\n\n\nhttps://github.com/monero-project/monero/pull/2056\n\n\nhttps://www.reddit.com/r/Monero/comments/5vgjs2/subaddresses_and_disposable_addresses/",
            "title": "Subaddress"
        },
        {
            "location": "/public-address/subaddress/#subaddress",
            "text": "Warning  This is unreleased feature.   Subaddresses serve two purposes described below.",
            "title": "Subaddress"
        },
        {
            "location": "/public-address/subaddress/#prevent-payer-from-linking-your-payouts-together",
            "text": "To prevent the payer from linking your payouts together simply generate a new subaddress for each payout.\nThis way services like  Shapeshift  wouldn't know it is you again receving Monero.  Note it won't help if you have an account with the service. Then your payouts are already linked in the service database, regardless of Monero.",
            "title": "Prevent payer from linking your payouts together"
        },
        {
            "location": "/public-address/subaddress/#group-incoming-payments",
            "text": "Think income streams.  Subaddresses allow to group incoming transactions within a single wallet.  User interface allows to assign convenience labels to subaddresses.  You may want to organize your incoming funds into a streams like \"donations\", \"work\", etc.  This is similar to subaccounts in your bank account. There is a very important difference though.  In Monero funds don't really sit on public addresses. Public addresses are conceptually a gateway or a routing mechanism. Funds sit on the unspent outputs. Thus, a single transaction can aggregate and spent outputs from multiple addresses.",
            "title": "Group incoming payments"
        },
        {
            "location": "/public-address/subaddress/#why-not-multiple-wallets",
            "text": "The advantage over creating multiple wallets is that you only have a  single seed  to manage.\nAll subaddresses can be derived from the wallet seed.  Additionally, you conveniently manage your subaddresses within a single user interface.",
            "title": "Why not multiple wallets?"
        },
        {
            "location": "/public-address/subaddress/#wallet-level-feature",
            "text": "Subaddresses are a wallet-level feature to construct and interpret transactions. They do not affect the consensus.",
            "title": "Wallet level feature"
        },
        {
            "location": "/public-address/subaddress/#data-structure",
            "text": "Subaddress has a dedicated \"network byte\":     Index  Size in bytes  Description      0  1  identifies the network and address type;  42  - main chain;  63  - test chain     Otherwise the data structure is the same as for  standard address .  Each subaddress conceptually has an index (with 0 being the base standard address).\nThe index is not directly included in subaddress structure but is used as input to create the private spend key.",
            "title": "Data structure"
        },
        {
            "location": "/public-address/subaddress/#generating",
            "text": "The private key  m  related to a subaddress is derived as follows:  m = Hs(a || i)  Where:   Hs  is a Keccak-256 hash function interpreted as integer and modulo  l  (maximum Ed25519 scalar)  a  is a private view key  i  is a subaddress index   TODO: describe rest of the procedure.",
            "title": "Generating"
        },
        {
            "location": "/public-address/subaddress/#caveates",
            "text": "Subaddress  cannot  be used to receive transactions having multiple destinations (e.g. pool payouts). Only the standard address (the one with index == 0) can receive such transactions.  It is not recommended to sweep all the balances of subaddress to main address in a single transaction. That links the subaddresses together on the blockchain. However, this only concerns privacy against specific sender and the situation will never get worse than not using subaddresses in the first place. If you need to join funds while preserving maximum privacy do it with individual transactions (one per subaddress).  Convenience labels are not preserved when recreating from seed.",
            "title": "Caveates"
        },
        {
            "location": "/public-address/subaddress/#reference",
            "text": "https://github.com/monero-project/monero/pull/2056  https://www.reddit.com/r/Monero/comments/5vgjs2/subaddresses_and_disposable_addresses/",
            "title": "Reference"
        },
        {
            "location": "/multisignature/",
            "text": "Multisignature\n\u00b6\n\n\n\n\nWarning\n\n\nThis is unreleased feature.\n\n\n\n\nIn cryptocurrencies, multisig feature allows to sign transaction with more than one private key. Funds protected with multisig can only be spent by signing with M-of-N keys.\n\n\nExample use cases:\n\n\n\n\nshared account (1-of-2; both husband and wife individually have full access to their funds)\n\n\nconsensus account (2-of-2; both husband and wife must agree to spend their funds)\n\n\nthreshold account (2-of-3; an escrow service is involved as an independent 3rd party, to co-sign with either the seller, or with the buyer, if seller and buyer do not agree)\n\n\nsecure account (2-of-3; a single owner controlls all 3 keys but secures them via a different means to diversify risks)\n\n\narbitrary threshold account (M-of-N; some cryptocurrencies provide full flexibility on the number of signers)\n\n\n\n\nMonero multisignature\n\u00b6\n\n\nMonero doesn't directly implement multisignatures (at least not in a classical sense). Monero emulates the feature by secret splitting.\n\n\nTransactions are still signed with a single spend key. The spend key is a sum of all N private keys. The rationale for such design is to decouple multisig from ring signatures.\n\n\nLet's consider the 2-of-3 scheme. We have 3 participants. Each participant is granted exactly 2 private keys in a way that pairs do not repeat between participants. This way any 2 participants together have all 3 private keys required to create the private spend key.\n\n\nMulti-signing is a wallet-level feature. There is no way to learn from the blockchain which transactions were created using multiple signatures.\n\n\nIt is also worth noting in Monero there is no multisig addresses as such. \nAddress structure\n does not care how the underlying private spend key got created.\n\n\nIn Monero, only N-of-N and (N-1)-of-N multisignature schemes are supported. This covers all common scenarios mentioned above but does not allow for arbitrary voting (like \"3-of-5 board members\").\n\n\nAfter multisig wallet setup every participant ends up knowing the public address and private view key. This is necessary for participants to recognize and decipher transactions they are supposed to co-sign.\n\n\nMultisig wallet setup\n\u00b6\n\n\nLet's consider a 2-of-3 scheme as it generalizes well. There will be three CLI wallet commands involved:\n\n\n1. prepare_multisig\n\u00b6\n\n\nEvery participant independently generates \ninitialization data\n. This is \nnot\n an address.\n\n\nEvery participant sends his initialization data manually to all other participants over secure channel.\n\n\n2. make_multisig\n\u00b6\n\n\nEvery participant applies initialization data from other participants. This results in a \nsecond round of initialization data\n. This is still \nnot\n an address.\n\n\nEvery participants sends his second round of init data to all other participants over secure channel.\n\n\n3. finalize_multisig\n\u00b6\n\n\nEvery participant finalizes wallet creation by applying the second round of init data from all other participants. This finally results in a wallet \npublic address\n and \nprivate view key\n to be known for all participants. \n\n\nPlease note actions are symmetric for all participants. Even though we considered a 2-of-3 scheme, every participant cooperates with everyone else. The secret splitting is performed internally by the wallet.\n\n\nSecure sharing of initialization data between participants is manual. The wallet itself does not provide any secure communication channel. This is out of scope.\n\n\nReceiving funds\n\u00b6\n\n\nAddress built by multisig setup is like any other address.\n\n\nYou can generate integrated addresses and subaddresses based on it.\n\n\nAll participants are able to see incoming funds as they share the private view key.\n\n\nWith a CLI, use the following commands to see incoming payments:\n\n\naddress\nrefresh\nshow_transfers\n\n\n\n\n\nSpending funds\n\u00b6\n\n\nTODO\n\n\nReference\n\u00b6\n\n\n\n\nhttps://monero.stackexchange.com/questions/5646/how-to-use-monero-multisignature-wallets-2-2-2-3",
            "title": "Multisignature"
        },
        {
            "location": "/multisignature/#multisignature",
            "text": "Warning  This is unreleased feature.   In cryptocurrencies, multisig feature allows to sign transaction with more than one private key. Funds protected with multisig can only be spent by signing with M-of-N keys.  Example use cases:   shared account (1-of-2; both husband and wife individually have full access to their funds)  consensus account (2-of-2; both husband and wife must agree to spend their funds)  threshold account (2-of-3; an escrow service is involved as an independent 3rd party, to co-sign with either the seller, or with the buyer, if seller and buyer do not agree)  secure account (2-of-3; a single owner controlls all 3 keys but secures them via a different means to diversify risks)  arbitrary threshold account (M-of-N; some cryptocurrencies provide full flexibility on the number of signers)",
            "title": "Multisignature"
        },
        {
            "location": "/multisignature/#monero-multisignature",
            "text": "Monero doesn't directly implement multisignatures (at least not in a classical sense). Monero emulates the feature by secret splitting.  Transactions are still signed with a single spend key. The spend key is a sum of all N private keys. The rationale for such design is to decouple multisig from ring signatures.  Let's consider the 2-of-3 scheme. We have 3 participants. Each participant is granted exactly 2 private keys in a way that pairs do not repeat between participants. This way any 2 participants together have all 3 private keys required to create the private spend key.  Multi-signing is a wallet-level feature. There is no way to learn from the blockchain which transactions were created using multiple signatures.  It is also worth noting in Monero there is no multisig addresses as such.  Address structure  does not care how the underlying private spend key got created.  In Monero, only N-of-N and (N-1)-of-N multisignature schemes are supported. This covers all common scenarios mentioned above but does not allow for arbitrary voting (like \"3-of-5 board members\").  After multisig wallet setup every participant ends up knowing the public address and private view key. This is necessary for participants to recognize and decipher transactions they are supposed to co-sign.",
            "title": "Monero multisignature"
        },
        {
            "location": "/multisignature/#multisig-wallet-setup",
            "text": "Let's consider a 2-of-3 scheme as it generalizes well. There will be three CLI wallet commands involved:",
            "title": "Multisig wallet setup"
        },
        {
            "location": "/multisignature/#1-prepare_multisig",
            "text": "Every participant independently generates  initialization data . This is  not  an address.  Every participant sends his initialization data manually to all other participants over secure channel.",
            "title": "1. prepare_multisig"
        },
        {
            "location": "/multisignature/#2-make_multisig",
            "text": "Every participant applies initialization data from other participants. This results in a  second round of initialization data . This is still  not  an address.  Every participants sends his second round of init data to all other participants over secure channel.",
            "title": "2. make_multisig"
        },
        {
            "location": "/multisignature/#3-finalize_multisig",
            "text": "Every participant finalizes wallet creation by applying the second round of init data from all other participants. This finally results in a wallet  public address  and  private view key  to be known for all participants.   Please note actions are symmetric for all participants. Even though we considered a 2-of-3 scheme, every participant cooperates with everyone else. The secret splitting is performed internally by the wallet.  Secure sharing of initialization data between participants is manual. The wallet itself does not provide any secure communication channel. This is out of scope.",
            "title": "3. finalize_multisig"
        },
        {
            "location": "/multisignature/#receiving-funds",
            "text": "Address built by multisig setup is like any other address.  You can generate integrated addresses and subaddresses based on it.  All participants are able to see incoming funds as they share the private view key.  With a CLI, use the following commands to see incoming payments:  address\nrefresh\nshow_transfers",
            "title": "Receiving funds"
        },
        {
            "location": "/multisignature/#spending-funds",
            "text": "TODO",
            "title": "Spending funds"
        },
        {
            "location": "/multisignature/#reference",
            "text": "https://monero.stackexchange.com/questions/5646/how-to-use-monero-multisignature-wallets-2-2-2-3",
            "title": "Reference"
        }
    ]
}